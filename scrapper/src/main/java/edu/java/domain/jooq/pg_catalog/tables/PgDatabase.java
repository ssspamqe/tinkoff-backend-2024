/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgDatabaseRecord;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgDatabase extends TableImpl<PgDatabaseRecord> {

    private static final long serialVersionUID = 1L;

    public static final PgDatabase PG_DATABASE = new PgDatabase();

    @Override
    @NotNull
    public Class<PgDatabaseRecord> getRecordType() {
        return PgDatabaseRecord.class;
    }

    public final TableField<PgDatabaseRecord, Long> OID = createField(DSL.name("oid"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgDatabaseRecord, String> DATNAME = createField(DSL.name("datname"), SQLDataType.VARCHAR.nullable(false), this, "");

    public final TableField<PgDatabaseRecord, Long> DATDBA = createField(DSL.name("datdba"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgDatabaseRecord, Integer> ENCODING = createField(DSL.name("encoding"), SQLDataType.INTEGER.nullable(false), this, "");

    public final TableField<PgDatabaseRecord, String> DATLOCPROVIDER = createField(DSL.name("datlocprovider"), SQLDataType.CHAR.nullable(false), this, "");

    public final TableField<PgDatabaseRecord, Boolean> DATISTEMPLATE = createField(DSL.name("datistemplate"), SQLDataType.BOOLEAN.nullable(false), this, "");

    public final TableField<PgDatabaseRecord, Boolean> DATALLOWCONN = createField(DSL.name("datallowconn"), SQLDataType.BOOLEAN.nullable(false), this, "");

    public final TableField<PgDatabaseRecord, Integer> DATCONNLIMIT = createField(DSL.name("datconnlimit"), SQLDataType.INTEGER.nullable(false), this, "");

    public final TableField<PgDatabaseRecord, Long> DATFROZENXID = createField(DSL.name("datfrozenxid"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgDatabaseRecord, Long> DATMINMXID = createField(DSL.name("datminmxid"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgDatabaseRecord, Long> DATTABLESPACE = createField(DSL.name("dattablespace"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgDatabaseRecord, String> DATCOLLATE = createField(DSL.name("datcollate"), SQLDataType.CLOB.nullable(false), this, "");

    public final TableField<PgDatabaseRecord, String> DATCTYPE = createField(DSL.name("datctype"), SQLDataType.CLOB.nullable(false), this, "");

    public final TableField<PgDatabaseRecord, String> DATICULOCALE = createField(DSL.name("daticulocale"), SQLDataType.CLOB, this, "");

    public final TableField<PgDatabaseRecord, String> DATICURULES = createField(DSL.name("daticurules"), SQLDataType.CLOB, this, "");

    public final TableField<PgDatabaseRecord, String> DATCOLLVERSION = createField(DSL.name("datcollversion"), SQLDataType.CLOB, this, "");

    public final TableField<PgDatabaseRecord, String[]> DATACL = createField(DSL.name("datacl"), SQLDataType.VARCHAR.array(), this, "");

    private PgDatabase(Name alias, Table<PgDatabaseRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgDatabase(Name alias, Table<PgDatabaseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public PgDatabase(String alias) {
        this(DSL.name(alias), PG_DATABASE);
    }

    public PgDatabase(Name alias) {
        this(alias, PG_DATABASE);
    }

    public PgDatabase() {
        this(DSL.name("pg_database"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public PgDatabase as(String alias) {
        return new PgDatabase(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public PgDatabase as(Name alias) {
        return new PgDatabase(alias, this);
    }

    @Override
    @NotNull
    public PgDatabase as(Table<?> alias) {
        return new PgDatabase(alias.getQualifiedName(), this);
    }

    @Override
    @NotNull
    public PgDatabase rename(String name) {
        return new PgDatabase(DSL.name(name), null);
    }

    @Override
    @NotNull
    public PgDatabase rename(Name name) {
        return new PgDatabase(name, null);
    }

    @Override
    @NotNull
    public PgDatabase rename(Table<?> name) {
        return new PgDatabase(name.getQualifiedName(), null);
    }
}
