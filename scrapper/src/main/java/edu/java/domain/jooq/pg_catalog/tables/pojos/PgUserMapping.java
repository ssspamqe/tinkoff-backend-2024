/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables.pojos;


import java.beans.ConstructorProperties;
import java.io.Serializable;
import java.util.Arrays;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgUserMapping implements Serializable {

    private static final long serialVersionUID = 1L;

    private Long oid;
    private Long umuser;
    private Long umserver;
    private String[] umoptions;

    public PgUserMapping() {}

    public PgUserMapping(PgUserMapping value) {
        this.oid = value.oid;
        this.umuser = value.umuser;
        this.umserver = value.umserver;
        this.umoptions = value.umoptions;
    }

    @ConstructorProperties({ "oid", "umuser", "umserver", "umoptions" })
    public PgUserMapping(
        @NotNull Long oid,
        @NotNull Long umuser,
        @NotNull Long umserver,
        @Nullable String[] umoptions
    ) {
        this.oid = oid;
        this.umuser = umuser;
        this.umserver = umserver;
        this.umoptions = umoptions;
    }

    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getOid() {
        return this.oid;
    }

    public void setOid(@NotNull Long oid) {
        this.oid = oid;
    }

    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getUmuser() {
        return this.umuser;
    }

    public void setUmuser(@NotNull Long umuser) {
        this.umuser = umuser;
    }

    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getUmserver() {
        return this.umserver;
    }

    public void setUmserver(@NotNull Long umserver) {
        this.umserver = umserver;
    }

    @Nullable
    public String[] getUmoptions() {
        return this.umoptions;
    }

    public void setUmoptions(@Nullable String[] umoptions) {
        this.umoptions = umoptions;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final PgUserMapping other = (PgUserMapping) obj;
        if (this.oid == null) {
            if (other.oid != null)
                return false;
        }
        else if (!this.oid.equals(other.oid))
            return false;
        if (this.umuser == null) {
            if (other.umuser != null)
                return false;
        }
        else if (!this.umuser.equals(other.umuser))
            return false;
        if (this.umserver == null) {
            if (other.umserver != null)
                return false;
        }
        else if (!this.umserver.equals(other.umserver))
            return false;
        if (this.umoptions == null) {
            if (other.umoptions != null)
                return false;
        }
        else if (!Arrays.deepEquals(this.umoptions, other.umoptions))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.oid == null) ? 0 : this.oid.hashCode());
        result = prime * result + ((this.umuser == null) ? 0 : this.umuser.hashCode());
        result = prime * result + ((this.umserver == null) ? 0 : this.umserver.hashCode());
        result = prime * result + ((this.umoptions == null) ? 0 : Arrays.deepHashCode(this.umoptions));
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("PgUserMapping (");

        sb.append(oid);
        sb.append(", ").append(umuser);
        sb.append(", ").append(umserver);
        sb.append(", ").append(Arrays.deepToString(umoptions));

        sb.append(")");
        return sb.toString();
    }
}
