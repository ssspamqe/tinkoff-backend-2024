/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgSettingsRecord;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgSettings extends TableImpl<PgSettingsRecord> {

    private static final long serialVersionUID = 1L;

    public static final PgSettings PG_SETTINGS = new PgSettings();

    @Override
    @NotNull
    public Class<PgSettingsRecord> getRecordType() {
        return PgSettingsRecord.class;
    }

    public final TableField<PgSettingsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    public final TableField<PgSettingsRecord, String> SETTING = createField(DSL.name("setting"), SQLDataType.CLOB, this, "");

    public final TableField<PgSettingsRecord, String> UNIT = createField(DSL.name("unit"), SQLDataType.CLOB, this, "");

    public final TableField<PgSettingsRecord, String> CATEGORY = createField(DSL.name("category"), SQLDataType.CLOB, this, "");

    public final TableField<PgSettingsRecord, String> SHORT_DESC = createField(DSL.name("short_desc"), SQLDataType.CLOB, this, "");

    public final TableField<PgSettingsRecord, String> EXTRA_DESC = createField(DSL.name("extra_desc"), SQLDataType.CLOB, this, "");

    public final TableField<PgSettingsRecord, String> CONTEXT = createField(DSL.name("context"), SQLDataType.CLOB, this, "");

    public final TableField<PgSettingsRecord, String> VARTYPE = createField(DSL.name("vartype"), SQLDataType.CLOB, this, "");

    public final TableField<PgSettingsRecord, String> SOURCE = createField(DSL.name("source"), SQLDataType.CLOB, this, "");

    public final TableField<PgSettingsRecord, String> MIN_VAL = createField(DSL.name("min_val"), SQLDataType.CLOB, this, "");

    public final TableField<PgSettingsRecord, String> MAX_VAL = createField(DSL.name("max_val"), SQLDataType.CLOB, this, "");

    public final TableField<PgSettingsRecord, String[]> ENUMVALS = createField(DSL.name("enumvals"), SQLDataType.CLOB.array(), this, "");

    public final TableField<PgSettingsRecord, String> BOOT_VAL = createField(DSL.name("boot_val"), SQLDataType.CLOB, this, "");

    public final TableField<PgSettingsRecord, String> RESET_VAL = createField(DSL.name("reset_val"), SQLDataType.CLOB, this, "");

    public final TableField<PgSettingsRecord, String> SOURCEFILE = createField(DSL.name("sourcefile"), SQLDataType.CLOB, this, "");

    public final TableField<PgSettingsRecord, Integer> SOURCELINE = createField(DSL.name("sourceline"), SQLDataType.INTEGER, this, "");

    public final TableField<PgSettingsRecord, Boolean> PENDING_RESTART = createField(DSL.name("pending_restart"), SQLDataType.BOOLEAN, this, "");

    private PgSettings(Name alias, Table<PgSettingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgSettings(Name alias, Table<PgSettingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view());
    }

    public PgSettings(String alias) {
        this(DSL.name(alias), PG_SETTINGS);
    }

    public PgSettings(Name alias) {
        this(alias, PG_SETTINGS);
    }

    public PgSettings() {
        this(DSL.name("pg_settings"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public PgSettings as(String alias) {
        return new PgSettings(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public PgSettings as(Name alias) {
        return new PgSettings(alias, this);
    }

    @Override
    @NotNull
    public PgSettings as(Table<?> alias) {
        return new PgSettings(alias.getQualifiedName(), this);
    }

    @Override
    @NotNull
    public PgSettings rename(String name) {
        return new PgSettings(DSL.name(name), null);
    }

    @Override
    @NotNull
    public PgSettings rename(Name name) {
        return new PgSettings(name, null);
    }

    @Override
    @NotNull
    public PgSettings rename(Table<?> name) {
        return new PgSettings(name.getQualifiedName(), null);
    }
}
