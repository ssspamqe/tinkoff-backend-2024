/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.information_schema.tables;


import edu.java.domain.jooq.information_schema.InformationSchema;
import edu.java.domain.jooq.information_schema.tables.records.SqlSizingRecord;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SqlSizing extends TableImpl<SqlSizingRecord> {

    private static final long serialVersionUID = 1L;

    public static final SqlSizing SQL_SIZING = new SqlSizing();

    @Override
    @NotNull
    public Class<SqlSizingRecord> getRecordType() {
        return SqlSizingRecord.class;
    }

    public final TableField<SqlSizingRecord, Integer> SIZING_ID = createField(DSL.name("sizing_id"), edu.java.domain.jooq.information_schema.Domains.CARDINAL_NUMBER.getDataType(), this, "");

    public final TableField<SqlSizingRecord, String> SIZING_NAME = createField(DSL.name("sizing_name"), edu.java.domain.jooq.information_schema.Domains.CHARACTER_DATA.getDataType(), this, "");

    public final TableField<SqlSizingRecord, Integer> SUPPORTED_VALUE = createField(DSL.name("supported_value"), edu.java.domain.jooq.information_schema.Domains.CARDINAL_NUMBER.getDataType(), this, "");

    public final TableField<SqlSizingRecord, String> COMMENTS = createField(DSL.name("comments"), edu.java.domain.jooq.information_schema.Domains.CHARACTER_DATA.getDataType(), this, "");

    private SqlSizing(Name alias, Table<SqlSizingRecord> aliased) {
        this(alias, aliased, null);
    }

    private SqlSizing(Name alias, Table<SqlSizingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public SqlSizing(String alias) {
        this(DSL.name(alias), SQL_SIZING);
    }

    public SqlSizing(Name alias) {
        this(alias, SQL_SIZING);
    }

    public SqlSizing() {
        this(DSL.name("sql_sizing"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    @NotNull
    public SqlSizing as(String alias) {
        return new SqlSizing(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public SqlSizing as(Name alias) {
        return new SqlSizing(alias, this);
    }

    @Override
    @NotNull
    public SqlSizing as(Table<?> alias) {
        return new SqlSizing(alias.getQualifiedName(), this);
    }

    @Override
    @NotNull
    public SqlSizing rename(String name) {
        return new SqlSizing(DSL.name(name), null);
    }

    @Override
    @NotNull
    public SqlSizing rename(Name name) {
        return new SqlSizing(name, null);
    }

    @Override
    @NotNull
    public SqlSizing rename(Table<?> name) {
        return new SqlSizing(name.getQualifiedName(), null);
    }
}
