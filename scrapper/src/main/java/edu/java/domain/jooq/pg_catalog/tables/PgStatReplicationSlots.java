/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgStatReplicationSlotsRecord;

import java.time.OffsetDateTime;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgStatReplicationSlots extends TableImpl<PgStatReplicationSlotsRecord> {

    private static final long serialVersionUID = 1L;

    public static final PgStatReplicationSlots PG_STAT_REPLICATION_SLOTS = new PgStatReplicationSlots();

    @Override
    @NotNull
    public Class<PgStatReplicationSlotsRecord> getRecordType() {
        return PgStatReplicationSlotsRecord.class;
    }

    public final TableField<PgStatReplicationSlotsRecord, String> SLOT_NAME = createField(DSL.name("slot_name"), SQLDataType.CLOB, this, "");

    public final TableField<PgStatReplicationSlotsRecord, Long> SPILL_TXNS = createField(DSL.name("spill_txns"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatReplicationSlotsRecord, Long> SPILL_COUNT = createField(DSL.name("spill_count"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatReplicationSlotsRecord, Long> SPILL_BYTES = createField(DSL.name("spill_bytes"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatReplicationSlotsRecord, Long> STREAM_TXNS = createField(DSL.name("stream_txns"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatReplicationSlotsRecord, Long> STREAM_COUNT = createField(DSL.name("stream_count"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatReplicationSlotsRecord, Long> STREAM_BYTES = createField(DSL.name("stream_bytes"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatReplicationSlotsRecord, Long> TOTAL_TXNS = createField(DSL.name("total_txns"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatReplicationSlotsRecord, Long> TOTAL_BYTES = createField(DSL.name("total_bytes"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatReplicationSlotsRecord, OffsetDateTime> STATS_RESET = createField(DSL.name("stats_reset"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private PgStatReplicationSlots(Name alias, Table<PgStatReplicationSlotsRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgStatReplicationSlots(Name alias, Table<PgStatReplicationSlotsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view());
    }

    public PgStatReplicationSlots(String alias) {
        this(DSL.name(alias), PG_STAT_REPLICATION_SLOTS);
    }

    public PgStatReplicationSlots(Name alias) {
        this(alias, PG_STAT_REPLICATION_SLOTS);
    }

    public PgStatReplicationSlots() {
        this(DSL.name("pg_stat_replication_slots"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public PgStatReplicationSlots as(String alias) {
        return new PgStatReplicationSlots(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public PgStatReplicationSlots as(Name alias) {
        return new PgStatReplicationSlots(alias, this);
    }

    @Override
    @NotNull
    public PgStatReplicationSlots as(Table<?> alias) {
        return new PgStatReplicationSlots(alias.getQualifiedName(), this);
    }

    @Override
    @NotNull
    public PgStatReplicationSlots rename(String name) {
        return new PgStatReplicationSlots(DSL.name(name), null);
    }

    @Override
    @NotNull
    public PgStatReplicationSlots rename(Name name) {
        return new PgStatReplicationSlots(name, null);
    }

    @Override
    @NotNull
    public PgStatReplicationSlots rename(Table<?> name) {
        return new PgStatReplicationSlots(name.getQualifiedName(), null);
    }
}
