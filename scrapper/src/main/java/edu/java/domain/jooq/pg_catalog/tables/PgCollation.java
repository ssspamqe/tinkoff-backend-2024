/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgCollationRecord;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgCollation extends TableImpl<PgCollationRecord> {

    private static final long serialVersionUID = 1L;

    public static final PgCollation PG_COLLATION = new PgCollation();

    @Override
    @NotNull
    public Class<PgCollationRecord> getRecordType() {
        return PgCollationRecord.class;
    }

    public final TableField<PgCollationRecord, Long> OID = createField(DSL.name("oid"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgCollationRecord, String> COLLNAME = createField(DSL.name("collname"), SQLDataType.VARCHAR.nullable(false), this, "");

    public final TableField<PgCollationRecord, Long> COLLNAMESPACE = createField(DSL.name("collnamespace"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgCollationRecord, Long> COLLOWNER = createField(DSL.name("collowner"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgCollationRecord, String> COLLPROVIDER = createField(DSL.name("collprovider"), SQLDataType.CHAR.nullable(false), this, "");

    public final TableField<PgCollationRecord, Boolean> COLLISDETERMINISTIC = createField(DSL.name("collisdeterministic"), SQLDataType.BOOLEAN.nullable(false), this, "");

    public final TableField<PgCollationRecord, Integer> COLLENCODING = createField(DSL.name("collencoding"), SQLDataType.INTEGER.nullable(false), this, "");

    public final TableField<PgCollationRecord, String> COLLCOLLATE = createField(DSL.name("collcollate"), SQLDataType.CLOB, this, "");

    public final TableField<PgCollationRecord, String> COLLCTYPE = createField(DSL.name("collctype"), SQLDataType.CLOB, this, "");

    public final TableField<PgCollationRecord, String> COLLICULOCALE = createField(DSL.name("colliculocale"), SQLDataType.CLOB, this, "");

    public final TableField<PgCollationRecord, String> COLLICURULES = createField(DSL.name("collicurules"), SQLDataType.CLOB, this, "");

    public final TableField<PgCollationRecord, String> COLLVERSION = createField(DSL.name("collversion"), SQLDataType.CLOB, this, "");

    private PgCollation(Name alias, Table<PgCollationRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgCollation(Name alias, Table<PgCollationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public PgCollation(String alias) {
        this(DSL.name(alias), PG_COLLATION);
    }

    public PgCollation(Name alias) {
        this(alias, PG_COLLATION);
    }

    public PgCollation() {
        this(DSL.name("pg_collation"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public PgCollation as(String alias) {
        return new PgCollation(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public PgCollation as(Name alias) {
        return new PgCollation(alias, this);
    }

    @Override
    @NotNull
    public PgCollation as(Table<?> alias) {
        return new PgCollation(alias.getQualifiedName(), this);
    }

    @Override
    @NotNull
    public PgCollation rename(String name) {
        return new PgCollation(DSL.name(name), null);
    }

    @Override
    @NotNull
    public PgCollation rename(Name name) {
        return new PgCollation(name, null);
    }

    @Override
    @NotNull
    public PgCollation rename(Table<?> name) {
        return new PgCollation(name.getQualifiedName(), null);
    }
}
