/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgStatGetActivityRecord;

import java.math.BigDecimal;
import java.time.OffsetDateTime;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgStatGetActivity extends TableImpl<PgStatGetActivityRecord> {

    private static final long serialVersionUID = 1L;

    public static final PgStatGetActivity PG_STAT_GET_ACTIVITY = new PgStatGetActivity();

    @Override
    @NotNull
    public Class<PgStatGetActivityRecord> getRecordType() {
        return PgStatGetActivityRecord.class;
    }

    public final TableField<PgStatGetActivityRecord, Long> DATID = createField(DSL.name("datid"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatGetActivityRecord, Integer> PID = createField(DSL.name("pid"), SQLDataType.INTEGER, this, "");

    public final TableField<PgStatGetActivityRecord, Long> USESYSID = createField(DSL.name("usesysid"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatGetActivityRecord, String> APPLICATION_NAME = createField(DSL.name("application_name"), SQLDataType.CLOB, this, "");

    public final TableField<PgStatGetActivityRecord, String> STATE = createField(DSL.name("state"), SQLDataType.CLOB, this, "");

    public final TableField<PgStatGetActivityRecord, String> QUERY = createField(DSL.name("query"), SQLDataType.CLOB, this, "");

    public final TableField<PgStatGetActivityRecord, String> WAIT_EVENT_TYPE = createField(DSL.name("wait_event_type"), SQLDataType.CLOB, this, "");

    public final TableField<PgStatGetActivityRecord, String> WAIT_EVENT = createField(DSL.name("wait_event"), SQLDataType.CLOB, this, "");

    public final TableField<PgStatGetActivityRecord, OffsetDateTime> XACT_START = createField(DSL.name("xact_start"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    public final TableField<PgStatGetActivityRecord, OffsetDateTime> QUERY_START = createField(DSL.name("query_start"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    public final TableField<PgStatGetActivityRecord, OffsetDateTime> BACKEND_START = createField(DSL.name("backend_start"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    public final TableField<PgStatGetActivityRecord, OffsetDateTime> STATE_CHANGE = createField(DSL.name("state_change"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    @Deprecated
    public final TableField<PgStatGetActivityRecord, Object> CLIENT_ADDR = createField(DSL.name("client_addr"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"inet\""), this, "");

    public final TableField<PgStatGetActivityRecord, String> CLIENT_HOSTNAME = createField(DSL.name("client_hostname"), SQLDataType.CLOB, this, "");

    public final TableField<PgStatGetActivityRecord, Integer> CLIENT_PORT = createField(DSL.name("client_port"), SQLDataType.INTEGER, this, "");

    public final TableField<PgStatGetActivityRecord, Long> BACKEND_XID = createField(DSL.name("backend_xid"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatGetActivityRecord, Long> BACKEND_XMIN = createField(DSL.name("backend_xmin"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatGetActivityRecord, String> BACKEND_TYPE = createField(DSL.name("backend_type"), SQLDataType.CLOB, this, "");

    public final TableField<PgStatGetActivityRecord, Boolean> SSL = createField(DSL.name("ssl"), SQLDataType.BOOLEAN, this, "");

    public final TableField<PgStatGetActivityRecord, String> SSLVERSION = createField(DSL.name("sslversion"), SQLDataType.CLOB, this, "");

    public final TableField<PgStatGetActivityRecord, String> SSLCIPHER = createField(DSL.name("sslcipher"), SQLDataType.CLOB, this, "");

    public final TableField<PgStatGetActivityRecord, Integer> SSLBITS = createField(DSL.name("sslbits"), SQLDataType.INTEGER, this, "");

    public final TableField<PgStatGetActivityRecord, String> SSL_CLIENT_DN = createField(DSL.name("ssl_client_dn"), SQLDataType.CLOB, this, "");

    public final TableField<PgStatGetActivityRecord, BigDecimal> SSL_CLIENT_SERIAL = createField(DSL.name("ssl_client_serial"), SQLDataType.NUMERIC, this, "");

    public final TableField<PgStatGetActivityRecord, String> SSL_ISSUER_DN = createField(DSL.name("ssl_issuer_dn"), SQLDataType.CLOB, this, "");

    public final TableField<PgStatGetActivityRecord, Boolean> GSS_AUTH = createField(DSL.name("gss_auth"), SQLDataType.BOOLEAN, this, "");

    public final TableField<PgStatGetActivityRecord, String> GSS_PRINC = createField(DSL.name("gss_princ"), SQLDataType.CLOB, this, "");

    public final TableField<PgStatGetActivityRecord, Boolean> GSS_ENC = createField(DSL.name("gss_enc"), SQLDataType.BOOLEAN, this, "");

    public final TableField<PgStatGetActivityRecord, Boolean> GSS_DELEGATION = createField(DSL.name("gss_delegation"), SQLDataType.BOOLEAN, this, "");

    public final TableField<PgStatGetActivityRecord, Integer> LEADER_PID = createField(DSL.name("leader_pid"), SQLDataType.INTEGER, this, "");

    public final TableField<PgStatGetActivityRecord, Long> QUERY_ID = createField(DSL.name("query_id"), SQLDataType.BIGINT, this, "");

    private PgStatGetActivity(Name alias, Table<PgStatGetActivityRecord> aliased) {
        this(alias, aliased, new Field[] {
            DSL.val(null, SQLDataType.INTEGER)
        });
    }

    private PgStatGetActivity(Name alias, Table<PgStatGetActivityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    public PgStatGetActivity(String alias) {
        this(DSL.name(alias), PG_STAT_GET_ACTIVITY);
    }

    public PgStatGetActivity(Name alias) {
        this(alias, PG_STAT_GET_ACTIVITY);
    }

    public PgStatGetActivity() {
        this(DSL.name("pg_stat_get_activity"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public PgStatGetActivity as(String alias) {
        return new PgStatGetActivity(DSL.name(alias), this, parameters);
    }

    @Override
    @NotNull
    public PgStatGetActivity as(Name alias) {
        return new PgStatGetActivity(alias, this, parameters);
    }

    @Override
    @NotNull
    public PgStatGetActivity as(Table<?> alias) {
        return new PgStatGetActivity(alias.getQualifiedName(), this, parameters);
    }

    @Override
    @NotNull
    public PgStatGetActivity rename(String name) {
        return new PgStatGetActivity(DSL.name(name), null, parameters);
    }

    @Override
    @NotNull
    public PgStatGetActivity rename(Name name) {
        return new PgStatGetActivity(name, null, parameters);
    }

    @Override
    @NotNull
    public PgStatGetActivity rename(Table<?> name) {
        return new PgStatGetActivity(name.getQualifiedName(), null, parameters);
    }

    public PgStatGetActivity call(
          Integer pid
    ) {
        PgStatGetActivity result = new PgStatGetActivity(DSL.name("pg_stat_get_activity"), null, new Field[] {
            DSL.val(pid, SQLDataType.INTEGER)
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    public PgStatGetActivity call(
          Field<Integer> pid
    ) {
        PgStatGetActivity result = new PgStatGetActivity(DSL.name("pg_stat_get_activity"), null, new Field[] {
            pid
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
