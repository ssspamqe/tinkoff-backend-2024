/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.information_schema.tables;


import edu.java.domain.jooq.information_schema.InformationSchema;
import edu.java.domain.jooq.information_schema.tables.records.UserMappingOptionsRecord;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UserMappingOptions extends TableImpl<UserMappingOptionsRecord> {

    private static final long serialVersionUID = 1L;

    public static final UserMappingOptions USER_MAPPING_OPTIONS = new UserMappingOptions();

    @Override
    @NotNull
    public Class<UserMappingOptionsRecord> getRecordType() {
        return UserMappingOptionsRecord.class;
    }

    public final TableField<UserMappingOptionsRecord, String> AUTHORIZATION_IDENTIFIER = createField(DSL.name("authorization_identifier"), edu.java.domain.jooq.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    public final TableField<UserMappingOptionsRecord, String> FOREIGN_SERVER_CATALOG = createField(DSL.name("foreign_server_catalog"), edu.java.domain.jooq.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    public final TableField<UserMappingOptionsRecord, String> FOREIGN_SERVER_NAME = createField(DSL.name("foreign_server_name"), edu.java.domain.jooq.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    public final TableField<UserMappingOptionsRecord, String> OPTION_NAME = createField(DSL.name("option_name"), edu.java.domain.jooq.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    public final TableField<UserMappingOptionsRecord, String> OPTION_VALUE = createField(DSL.name("option_value"), edu.java.domain.jooq.information_schema.Domains.CHARACTER_DATA.getDataType(), this, "");

    private UserMappingOptions(Name alias, Table<UserMappingOptionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserMappingOptions(Name alias, Table<UserMappingOptionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view());
    }

    public UserMappingOptions(String alias) {
        this(DSL.name(alias), USER_MAPPING_OPTIONS);
    }

    public UserMappingOptions(Name alias) {
        this(alias, USER_MAPPING_OPTIONS);
    }

    public UserMappingOptions() {
        this(DSL.name("user_mapping_options"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    @NotNull
    public UserMappingOptions as(String alias) {
        return new UserMappingOptions(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public UserMappingOptions as(Name alias) {
        return new UserMappingOptions(alias, this);
    }

    @Override
    @NotNull
    public UserMappingOptions as(Table<?> alias) {
        return new UserMappingOptions(alias.getQualifiedName(), this);
    }

    @Override
    @NotNull
    public UserMappingOptions rename(String name) {
        return new UserMappingOptions(DSL.name(name), null);
    }

    @Override
    @NotNull
    public UserMappingOptions rename(Name name) {
        return new UserMappingOptions(name, null);
    }

    @Override
    @NotNull
    public UserMappingOptions rename(Table<?> name) {
        return new UserMappingOptions(name.getQualifiedName(), null);
    }
}
