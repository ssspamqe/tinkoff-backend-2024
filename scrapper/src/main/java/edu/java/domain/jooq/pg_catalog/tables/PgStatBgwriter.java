/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgStatBgwriterRecord;

import java.time.OffsetDateTime;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgStatBgwriter extends TableImpl<PgStatBgwriterRecord> {

    private static final long serialVersionUID = 1L;

    public static final PgStatBgwriter PG_STAT_BGWRITER = new PgStatBgwriter();

    @Override
    @NotNull
    public Class<PgStatBgwriterRecord> getRecordType() {
        return PgStatBgwriterRecord.class;
    }

    public final TableField<PgStatBgwriterRecord, Long> CHECKPOINTS_TIMED = createField(DSL.name("checkpoints_timed"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatBgwriterRecord, Long> CHECKPOINTS_REQ = createField(DSL.name("checkpoints_req"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatBgwriterRecord, Double> CHECKPOINT_WRITE_TIME = createField(DSL.name("checkpoint_write_time"), SQLDataType.DOUBLE, this, "");

    public final TableField<PgStatBgwriterRecord, Double> CHECKPOINT_SYNC_TIME = createField(DSL.name("checkpoint_sync_time"), SQLDataType.DOUBLE, this, "");

    public final TableField<PgStatBgwriterRecord, Long> BUFFERS_CHECKPOINT = createField(DSL.name("buffers_checkpoint"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatBgwriterRecord, Long> BUFFERS_CLEAN = createField(DSL.name("buffers_clean"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatBgwriterRecord, Long> MAXWRITTEN_CLEAN = createField(DSL.name("maxwritten_clean"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatBgwriterRecord, Long> BUFFERS_BACKEND = createField(DSL.name("buffers_backend"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatBgwriterRecord, Long> BUFFERS_BACKEND_FSYNC = createField(DSL.name("buffers_backend_fsync"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatBgwriterRecord, Long> BUFFERS_ALLOC = createField(DSL.name("buffers_alloc"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatBgwriterRecord, OffsetDateTime> STATS_RESET = createField(DSL.name("stats_reset"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private PgStatBgwriter(Name alias, Table<PgStatBgwriterRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgStatBgwriter(Name alias, Table<PgStatBgwriterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view());
    }

    public PgStatBgwriter(String alias) {
        this(DSL.name(alias), PG_STAT_BGWRITER);
    }

    public PgStatBgwriter(Name alias) {
        this(alias, PG_STAT_BGWRITER);
    }

    public PgStatBgwriter() {
        this(DSL.name("pg_stat_bgwriter"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public PgStatBgwriter as(String alias) {
        return new PgStatBgwriter(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public PgStatBgwriter as(Name alias) {
        return new PgStatBgwriter(alias, this);
    }

    @Override
    @NotNull
    public PgStatBgwriter as(Table<?> alias) {
        return new PgStatBgwriter(alias.getQualifiedName(), this);
    }

    @Override
    @NotNull
    public PgStatBgwriter rename(String name) {
        return new PgStatBgwriter(DSL.name(name), null);
    }

    @Override
    @NotNull
    public PgStatBgwriter rename(Name name) {
        return new PgStatBgwriter(name, null);
    }

    @Override
    @NotNull
    public PgStatBgwriter rename(Table<?> name) {
        return new PgStatBgwriter(name.getQualifiedName(), null);
    }
}
