/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables.pojos;


import java.beans.ConstructorProperties;
import java.io.Serializable;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgEnum implements Serializable {

    private static final long serialVersionUID = 1L;

    private Long oid;
    private Long enumtypid;
    private Float enumsortorder;
    private String enumlabel;

    public PgEnum() {}

    public PgEnum(PgEnum value) {
        this.oid = value.oid;
        this.enumtypid = value.enumtypid;
        this.enumsortorder = value.enumsortorder;
        this.enumlabel = value.enumlabel;
    }

    @ConstructorProperties({ "oid", "enumtypid", "enumsortorder", "enumlabel" })
    public PgEnum(
        @NotNull Long oid,
        @NotNull Long enumtypid,
        @NotNull Float enumsortorder,
        @NotNull String enumlabel
    ) {
        this.oid = oid;
        this.enumtypid = enumtypid;
        this.enumsortorder = enumsortorder;
        this.enumlabel = enumlabel;
    }

    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getOid() {
        return this.oid;
    }

    public void setOid(@NotNull Long oid) {
        this.oid = oid;
    }

    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getEnumtypid() {
        return this.enumtypid;
    }

    public void setEnumtypid(@NotNull Long enumtypid) {
        this.enumtypid = enumtypid;
    }

    @jakarta.validation.constraints.NotNull
    @NotNull
    public Float getEnumsortorder() {
        return this.enumsortorder;
    }

    public void setEnumsortorder(@NotNull Float enumsortorder) {
        this.enumsortorder = enumsortorder;
    }

    @jakarta.validation.constraints.NotNull
    @NotNull
    public String getEnumlabel() {
        return this.enumlabel;
    }

    public void setEnumlabel(@NotNull String enumlabel) {
        this.enumlabel = enumlabel;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final PgEnum other = (PgEnum) obj;
        if (this.oid == null) {
            if (other.oid != null)
                return false;
        }
        else if (!this.oid.equals(other.oid))
            return false;
        if (this.enumtypid == null) {
            if (other.enumtypid != null)
                return false;
        }
        else if (!this.enumtypid.equals(other.enumtypid))
            return false;
        if (this.enumsortorder == null) {
            if (other.enumsortorder != null)
                return false;
        }
        else if (!this.enumsortorder.equals(other.enumsortorder))
            return false;
        if (this.enumlabel == null) {
            if (other.enumlabel != null)
                return false;
        }
        else if (!this.enumlabel.equals(other.enumlabel))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.oid == null) ? 0 : this.oid.hashCode());
        result = prime * result + ((this.enumtypid == null) ? 0 : this.enumtypid.hashCode());
        result = prime * result + ((this.enumsortorder == null) ? 0 : this.enumsortorder.hashCode());
        result = prime * result + ((this.enumlabel == null) ? 0 : this.enumlabel.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("PgEnum (");

        sb.append(oid);
        sb.append(", ").append(enumtypid);
        sb.append(", ").append(enumsortorder);
        sb.append(", ").append(enumlabel);

        sb.append(")");
        return sb.toString();
    }
}
