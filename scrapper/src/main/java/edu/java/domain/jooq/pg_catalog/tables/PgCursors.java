/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgCursorsRecord;

import java.time.OffsetDateTime;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgCursors extends TableImpl<PgCursorsRecord> {

    private static final long serialVersionUID = 1L;

    public static final PgCursors PG_CURSORS = new PgCursors();

    @Override
    @NotNull
    public Class<PgCursorsRecord> getRecordType() {
        return PgCursorsRecord.class;
    }

    public final TableField<PgCursorsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    public final TableField<PgCursorsRecord, String> STATEMENT = createField(DSL.name("statement"), SQLDataType.CLOB, this, "");

    public final TableField<PgCursorsRecord, Boolean> IS_HOLDABLE = createField(DSL.name("is_holdable"), SQLDataType.BOOLEAN, this, "");

    public final TableField<PgCursorsRecord, Boolean> IS_BINARY = createField(DSL.name("is_binary"), SQLDataType.BOOLEAN, this, "");

    public final TableField<PgCursorsRecord, Boolean> IS_SCROLLABLE = createField(DSL.name("is_scrollable"), SQLDataType.BOOLEAN, this, "");

    public final TableField<PgCursorsRecord, OffsetDateTime> CREATION_TIME = createField(DSL.name("creation_time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private PgCursors(Name alias, Table<PgCursorsRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgCursors(Name alias, Table<PgCursorsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view());
    }

    public PgCursors(String alias) {
        this(DSL.name(alias), PG_CURSORS);
    }

    public PgCursors(Name alias) {
        this(alias, PG_CURSORS);
    }

    public PgCursors() {
        this(DSL.name("pg_cursors"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public PgCursors as(String alias) {
        return new PgCursors(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public PgCursors as(Name alias) {
        return new PgCursors(alias, this);
    }

    @Override
    @NotNull
    public PgCursors as(Table<?> alias) {
        return new PgCursors(alias.getQualifiedName(), this);
    }

    @Override
    @NotNull
    public PgCursors rename(String name) {
        return new PgCursors(DSL.name(name), null);
    }

    @Override
    @NotNull
    public PgCursors rename(Name name) {
        return new PgCursors(name, null);
    }

    @Override
    @NotNull
    public PgCursors rename(Table<?> name) {
        return new PgCursors(name.getQualifiedName(), null);
    }
}
