/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables.pojos;


import java.beans.ConstructorProperties;
import java.io.Serializable;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.Nullable;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgMatviews implements Serializable {

    private static final long serialVersionUID = 1L;

    private String schemaname;
    private String matviewname;
    private String matviewowner;
    private String tablespace;
    private Boolean hasindexes;
    private Boolean ispopulated;
    private String definition;

    public PgMatviews() {}

    public PgMatviews(PgMatviews value) {
        this.schemaname = value.schemaname;
        this.matviewname = value.matviewname;
        this.matviewowner = value.matviewowner;
        this.tablespace = value.tablespace;
        this.hasindexes = value.hasindexes;
        this.ispopulated = value.ispopulated;
        this.definition = value.definition;
    }

    @ConstructorProperties({ "schemaname", "matviewname", "matviewowner", "tablespace", "hasindexes", "ispopulated", "definition" })
    public PgMatviews(
        @Nullable String schemaname,
        @Nullable String matviewname,
        @Nullable String matviewowner,
        @Nullable String tablespace,
        @Nullable Boolean hasindexes,
        @Nullable Boolean ispopulated,
        @Nullable String definition
    ) {
        this.schemaname = schemaname;
        this.matviewname = matviewname;
        this.matviewowner = matviewowner;
        this.tablespace = tablespace;
        this.hasindexes = hasindexes;
        this.ispopulated = ispopulated;
        this.definition = definition;
    }

    @Nullable
    public String getSchemaname() {
        return this.schemaname;
    }

    public void setSchemaname(@Nullable String schemaname) {
        this.schemaname = schemaname;
    }

    @Nullable
    public String getMatviewname() {
        return this.matviewname;
    }

    public void setMatviewname(@Nullable String matviewname) {
        this.matviewname = matviewname;
    }

    @Nullable
    public String getMatviewowner() {
        return this.matviewowner;
    }

    public void setMatviewowner(@Nullable String matviewowner) {
        this.matviewowner = matviewowner;
    }

    @Nullable
    public String getTablespace() {
        return this.tablespace;
    }

    public void setTablespace(@Nullable String tablespace) {
        this.tablespace = tablespace;
    }

    @Nullable
    public Boolean getHasindexes() {
        return this.hasindexes;
    }

    public void setHasindexes(@Nullable Boolean hasindexes) {
        this.hasindexes = hasindexes;
    }

    @Nullable
    public Boolean getIspopulated() {
        return this.ispopulated;
    }

    public void setIspopulated(@Nullable Boolean ispopulated) {
        this.ispopulated = ispopulated;
    }

    @Nullable
    public String getDefinition() {
        return this.definition;
    }

    public void setDefinition(@Nullable String definition) {
        this.definition = definition;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final PgMatviews other = (PgMatviews) obj;
        if (this.schemaname == null) {
            if (other.schemaname != null)
                return false;
        }
        else if (!this.schemaname.equals(other.schemaname))
            return false;
        if (this.matviewname == null) {
            if (other.matviewname != null)
                return false;
        }
        else if (!this.matviewname.equals(other.matviewname))
            return false;
        if (this.matviewowner == null) {
            if (other.matviewowner != null)
                return false;
        }
        else if (!this.matviewowner.equals(other.matviewowner))
            return false;
        if (this.tablespace == null) {
            if (other.tablespace != null)
                return false;
        }
        else if (!this.tablespace.equals(other.tablespace))
            return false;
        if (this.hasindexes == null) {
            if (other.hasindexes != null)
                return false;
        }
        else if (!this.hasindexes.equals(other.hasindexes))
            return false;
        if (this.ispopulated == null) {
            if (other.ispopulated != null)
                return false;
        }
        else if (!this.ispopulated.equals(other.ispopulated))
            return false;
        if (this.definition == null) {
            if (other.definition != null)
                return false;
        }
        else if (!this.definition.equals(other.definition))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.schemaname == null) ? 0 : this.schemaname.hashCode());
        result = prime * result + ((this.matviewname == null) ? 0 : this.matviewname.hashCode());
        result = prime * result + ((this.matviewowner == null) ? 0 : this.matviewowner.hashCode());
        result = prime * result + ((this.tablespace == null) ? 0 : this.tablespace.hashCode());
        result = prime * result + ((this.hasindexes == null) ? 0 : this.hasindexes.hashCode());
        result = prime * result + ((this.ispopulated == null) ? 0 : this.ispopulated.hashCode());
        result = prime * result + ((this.definition == null) ? 0 : this.definition.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("PgMatviews (");

        sb.append(schemaname);
        sb.append(", ").append(matviewname);
        sb.append(", ").append(matviewowner);
        sb.append(", ").append(tablespace);
        sb.append(", ").append(hasindexes);
        sb.append(", ").append(ispopulated);
        sb.append(", ").append(definition);

        sb.append(")");
        return sb.toString();
    }
}
