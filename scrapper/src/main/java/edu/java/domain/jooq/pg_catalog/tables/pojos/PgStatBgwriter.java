/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables.pojos;


import java.beans.ConstructorProperties;
import java.io.Serializable;
import java.time.OffsetDateTime;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.Nullable;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgStatBgwriter implements Serializable {

    private static final long serialVersionUID = 1L;

    private Long checkpointsTimed;
    private Long checkpointsReq;
    private Double checkpointWriteTime;
    private Double checkpointSyncTime;
    private Long buffersCheckpoint;
    private Long buffersClean;
    private Long maxwrittenClean;
    private Long buffersBackend;
    private Long buffersBackendFsync;
    private Long buffersAlloc;
    private OffsetDateTime statsReset;

    public PgStatBgwriter() {}

    public PgStatBgwriter(PgStatBgwriter value) {
        this.checkpointsTimed = value.checkpointsTimed;
        this.checkpointsReq = value.checkpointsReq;
        this.checkpointWriteTime = value.checkpointWriteTime;
        this.checkpointSyncTime = value.checkpointSyncTime;
        this.buffersCheckpoint = value.buffersCheckpoint;
        this.buffersClean = value.buffersClean;
        this.maxwrittenClean = value.maxwrittenClean;
        this.buffersBackend = value.buffersBackend;
        this.buffersBackendFsync = value.buffersBackendFsync;
        this.buffersAlloc = value.buffersAlloc;
        this.statsReset = value.statsReset;
    }

    @ConstructorProperties({ "checkpointsTimed", "checkpointsReq", "checkpointWriteTime", "checkpointSyncTime", "buffersCheckpoint", "buffersClean", "maxwrittenClean", "buffersBackend", "buffersBackendFsync", "buffersAlloc", "statsReset" })
    public PgStatBgwriter(
        @Nullable Long checkpointsTimed,
        @Nullable Long checkpointsReq,
        @Nullable Double checkpointWriteTime,
        @Nullable Double checkpointSyncTime,
        @Nullable Long buffersCheckpoint,
        @Nullable Long buffersClean,
        @Nullable Long maxwrittenClean,
        @Nullable Long buffersBackend,
        @Nullable Long buffersBackendFsync,
        @Nullable Long buffersAlloc,
        @Nullable OffsetDateTime statsReset
    ) {
        this.checkpointsTimed = checkpointsTimed;
        this.checkpointsReq = checkpointsReq;
        this.checkpointWriteTime = checkpointWriteTime;
        this.checkpointSyncTime = checkpointSyncTime;
        this.buffersCheckpoint = buffersCheckpoint;
        this.buffersClean = buffersClean;
        this.maxwrittenClean = maxwrittenClean;
        this.buffersBackend = buffersBackend;
        this.buffersBackendFsync = buffersBackendFsync;
        this.buffersAlloc = buffersAlloc;
        this.statsReset = statsReset;
    }

    @Nullable
    public Long getCheckpointsTimed() {
        return this.checkpointsTimed;
    }

    public void setCheckpointsTimed(@Nullable Long checkpointsTimed) {
        this.checkpointsTimed = checkpointsTimed;
    }

    @Nullable
    public Long getCheckpointsReq() {
        return this.checkpointsReq;
    }

    public void setCheckpointsReq(@Nullable Long checkpointsReq) {
        this.checkpointsReq = checkpointsReq;
    }

    @Nullable
    public Double getCheckpointWriteTime() {
        return this.checkpointWriteTime;
    }

    public void setCheckpointWriteTime(@Nullable Double checkpointWriteTime) {
        this.checkpointWriteTime = checkpointWriteTime;
    }

    @Nullable
    public Double getCheckpointSyncTime() {
        return this.checkpointSyncTime;
    }

    public void setCheckpointSyncTime(@Nullable Double checkpointSyncTime) {
        this.checkpointSyncTime = checkpointSyncTime;
    }

    @Nullable
    public Long getBuffersCheckpoint() {
        return this.buffersCheckpoint;
    }

    public void setBuffersCheckpoint(@Nullable Long buffersCheckpoint) {
        this.buffersCheckpoint = buffersCheckpoint;
    }

    @Nullable
    public Long getBuffersClean() {
        return this.buffersClean;
    }

    public void setBuffersClean(@Nullable Long buffersClean) {
        this.buffersClean = buffersClean;
    }

    @Nullable
    public Long getMaxwrittenClean() {
        return this.maxwrittenClean;
    }

    public void setMaxwrittenClean(@Nullable Long maxwrittenClean) {
        this.maxwrittenClean = maxwrittenClean;
    }

    @Nullable
    public Long getBuffersBackend() {
        return this.buffersBackend;
    }

    public void setBuffersBackend(@Nullable Long buffersBackend) {
        this.buffersBackend = buffersBackend;
    }

    @Nullable
    public Long getBuffersBackendFsync() {
        return this.buffersBackendFsync;
    }

    public void setBuffersBackendFsync(@Nullable Long buffersBackendFsync) {
        this.buffersBackendFsync = buffersBackendFsync;
    }

    @Nullable
    public Long getBuffersAlloc() {
        return this.buffersAlloc;
    }

    public void setBuffersAlloc(@Nullable Long buffersAlloc) {
        this.buffersAlloc = buffersAlloc;
    }

    @Nullable
    public OffsetDateTime getStatsReset() {
        return this.statsReset;
    }

    public void setStatsReset(@Nullable OffsetDateTime statsReset) {
        this.statsReset = statsReset;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final PgStatBgwriter other = (PgStatBgwriter) obj;
        if (this.checkpointsTimed == null) {
            if (other.checkpointsTimed != null)
                return false;
        }
        else if (!this.checkpointsTimed.equals(other.checkpointsTimed))
            return false;
        if (this.checkpointsReq == null) {
            if (other.checkpointsReq != null)
                return false;
        }
        else if (!this.checkpointsReq.equals(other.checkpointsReq))
            return false;
        if (this.checkpointWriteTime == null) {
            if (other.checkpointWriteTime != null)
                return false;
        }
        else if (!this.checkpointWriteTime.equals(other.checkpointWriteTime))
            return false;
        if (this.checkpointSyncTime == null) {
            if (other.checkpointSyncTime != null)
                return false;
        }
        else if (!this.checkpointSyncTime.equals(other.checkpointSyncTime))
            return false;
        if (this.buffersCheckpoint == null) {
            if (other.buffersCheckpoint != null)
                return false;
        }
        else if (!this.buffersCheckpoint.equals(other.buffersCheckpoint))
            return false;
        if (this.buffersClean == null) {
            if (other.buffersClean != null)
                return false;
        }
        else if (!this.buffersClean.equals(other.buffersClean))
            return false;
        if (this.maxwrittenClean == null) {
            if (other.maxwrittenClean != null)
                return false;
        }
        else if (!this.maxwrittenClean.equals(other.maxwrittenClean))
            return false;
        if (this.buffersBackend == null) {
            if (other.buffersBackend != null)
                return false;
        }
        else if (!this.buffersBackend.equals(other.buffersBackend))
            return false;
        if (this.buffersBackendFsync == null) {
            if (other.buffersBackendFsync != null)
                return false;
        }
        else if (!this.buffersBackendFsync.equals(other.buffersBackendFsync))
            return false;
        if (this.buffersAlloc == null) {
            if (other.buffersAlloc != null)
                return false;
        }
        else if (!this.buffersAlloc.equals(other.buffersAlloc))
            return false;
        if (this.statsReset == null) {
            if (other.statsReset != null)
                return false;
        }
        else if (!this.statsReset.equals(other.statsReset))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.checkpointsTimed == null) ? 0 : this.checkpointsTimed.hashCode());
        result = prime * result + ((this.checkpointsReq == null) ? 0 : this.checkpointsReq.hashCode());
        result = prime * result + ((this.checkpointWriteTime == null) ? 0 : this.checkpointWriteTime.hashCode());
        result = prime * result + ((this.checkpointSyncTime == null) ? 0 : this.checkpointSyncTime.hashCode());
        result = prime * result + ((this.buffersCheckpoint == null) ? 0 : this.buffersCheckpoint.hashCode());
        result = prime * result + ((this.buffersClean == null) ? 0 : this.buffersClean.hashCode());
        result = prime * result + ((this.maxwrittenClean == null) ? 0 : this.maxwrittenClean.hashCode());
        result = prime * result + ((this.buffersBackend == null) ? 0 : this.buffersBackend.hashCode());
        result = prime * result + ((this.buffersBackendFsync == null) ? 0 : this.buffersBackendFsync.hashCode());
        result = prime * result + ((this.buffersAlloc == null) ? 0 : this.buffersAlloc.hashCode());
        result = prime * result + ((this.statsReset == null) ? 0 : this.statsReset.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("PgStatBgwriter (");

        sb.append(checkpointsTimed);
        sb.append(", ").append(checkpointsReq);
        sb.append(", ").append(checkpointWriteTime);
        sb.append(", ").append(checkpointSyncTime);
        sb.append(", ").append(buffersCheckpoint);
        sb.append(", ").append(buffersClean);
        sb.append(", ").append(maxwrittenClean);
        sb.append(", ").append(buffersBackend);
        sb.append(", ").append(buffersBackendFsync);
        sb.append(", ").append(buffersAlloc);
        sb.append(", ").append(statsReset);

        sb.append(")");
        return sb.toString();
    }
}
