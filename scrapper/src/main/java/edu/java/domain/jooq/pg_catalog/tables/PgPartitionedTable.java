/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgPartitionedTableRecord;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgPartitionedTable extends TableImpl<PgPartitionedTableRecord> {

    private static final long serialVersionUID = 1L;

    public static final PgPartitionedTable PG_PARTITIONED_TABLE = new PgPartitionedTable();

    @Override
    @NotNull
    public Class<PgPartitionedTableRecord> getRecordType() {
        return PgPartitionedTableRecord.class;
    }

    public final TableField<PgPartitionedTableRecord, Long> PARTRELID = createField(DSL.name("partrelid"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgPartitionedTableRecord, String> PARTSTRAT = createField(DSL.name("partstrat"), SQLDataType.CHAR.nullable(false), this, "");

    public final TableField<PgPartitionedTableRecord, Short> PARTNATTS = createField(DSL.name("partnatts"), SQLDataType.SMALLINT.nullable(false), this, "");

    public final TableField<PgPartitionedTableRecord, Long> PARTDEFID = createField(DSL.name("partdefid"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgPartitionedTableRecord, Object[]> PARTATTRS = createField(DSL.name("partattrs"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"nt2vector\"").nullable(false).array(), this, "");

    public final TableField<PgPartitionedTableRecord, Object[]> PARTCLASS = createField(DSL.name("partclass"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"idvector\"").nullable(false).array(), this, "");

    public final TableField<PgPartitionedTableRecord, Object[]> PARTCOLLATION = createField(DSL.name("partcollation"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"idvector\"").nullable(false).array(), this, "");

    @Deprecated
    public final TableField<PgPartitionedTableRecord, Object> PARTEXPRS = createField(DSL.name("partexprs"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_node_tree\""), this, "");

    private PgPartitionedTable(Name alias, Table<PgPartitionedTableRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgPartitionedTable(Name alias, Table<PgPartitionedTableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public PgPartitionedTable(String alias) {
        this(DSL.name(alias), PG_PARTITIONED_TABLE);
    }

    public PgPartitionedTable(Name alias) {
        this(alias, PG_PARTITIONED_TABLE);
    }

    public PgPartitionedTable() {
        this(DSL.name("pg_partitioned_table"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public PgPartitionedTable as(String alias) {
        return new PgPartitionedTable(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public PgPartitionedTable as(Name alias) {
        return new PgPartitionedTable(alias, this);
    }

    @Override
    @NotNull
    public PgPartitionedTable as(Table<?> alias) {
        return new PgPartitionedTable(alias.getQualifiedName(), this);
    }

    @Override
    @NotNull
    public PgPartitionedTable rename(String name) {
        return new PgPartitionedTable(DSL.name(name), null);
    }

    @Override
    @NotNull
    public PgPartitionedTable rename(Name name) {
        return new PgPartitionedTable(name, null);
    }

    @Override
    @NotNull
    public PgPartitionedTable rename(Table<?> name) {
        return new PgPartitionedTable(name.getQualifiedName(), null);
    }
}
