/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgOperatorRecord;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgOperator extends TableImpl<PgOperatorRecord> {

    private static final long serialVersionUID = 1L;

    public static final PgOperator PG_OPERATOR = new PgOperator();

    @Override
    @NotNull
    public Class<PgOperatorRecord> getRecordType() {
        return PgOperatorRecord.class;
    }

    public final TableField<PgOperatorRecord, Long> OID = createField(DSL.name("oid"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgOperatorRecord, String> OPRNAME = createField(DSL.name("oprname"), SQLDataType.VARCHAR.nullable(false), this, "");

    public final TableField<PgOperatorRecord, Long> OPRNAMESPACE = createField(DSL.name("oprnamespace"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgOperatorRecord, Long> OPROWNER = createField(DSL.name("oprowner"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgOperatorRecord, String> OPRKIND = createField(DSL.name("oprkind"), SQLDataType.CHAR.nullable(false), this, "");

    public final TableField<PgOperatorRecord, Boolean> OPRCANMERGE = createField(DSL.name("oprcanmerge"), SQLDataType.BOOLEAN.nullable(false), this, "");

    public final TableField<PgOperatorRecord, Boolean> OPRCANHASH = createField(DSL.name("oprcanhash"), SQLDataType.BOOLEAN.nullable(false), this, "");

    public final TableField<PgOperatorRecord, Long> OPRLEFT = createField(DSL.name("oprleft"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgOperatorRecord, Long> OPRRIGHT = createField(DSL.name("oprright"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgOperatorRecord, Long> OPRRESULT = createField(DSL.name("oprresult"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgOperatorRecord, Long> OPRCOM = createField(DSL.name("oprcom"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgOperatorRecord, Long> OPRNEGATE = createField(DSL.name("oprnegate"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgOperatorRecord, String> OPRCODE = createField(DSL.name("oprcode"), SQLDataType.VARCHAR.nullable(false), this, "");

    public final TableField<PgOperatorRecord, String> OPRREST = createField(DSL.name("oprrest"), SQLDataType.VARCHAR.nullable(false), this, "");

    public final TableField<PgOperatorRecord, String> OPRJOIN = createField(DSL.name("oprjoin"), SQLDataType.VARCHAR.nullable(false), this, "");

    private PgOperator(Name alias, Table<PgOperatorRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgOperator(Name alias, Table<PgOperatorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public PgOperator(String alias) {
        this(DSL.name(alias), PG_OPERATOR);
    }

    public PgOperator(Name alias) {
        this(alias, PG_OPERATOR);
    }

    public PgOperator() {
        this(DSL.name("pg_operator"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public PgOperator as(String alias) {
        return new PgOperator(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public PgOperator as(Name alias) {
        return new PgOperator(alias, this);
    }

    @Override
    @NotNull
    public PgOperator as(Table<?> alias) {
        return new PgOperator(alias.getQualifiedName(), this);
    }

    @Override
    @NotNull
    public PgOperator rename(String name) {
        return new PgOperator(DSL.name(name), null);
    }

    @Override
    @NotNull
    public PgOperator rename(Name name) {
        return new PgOperator(name, null);
    }

    @Override
    @NotNull
    public PgOperator rename(Table<?> name) {
        return new PgOperator(name.getQualifiedName(), null);
    }
}
