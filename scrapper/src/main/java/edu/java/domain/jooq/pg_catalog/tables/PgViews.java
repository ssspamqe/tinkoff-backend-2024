/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgViewsRecord;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgViews extends TableImpl<PgViewsRecord> {

    private static final long serialVersionUID = 1L;

    public static final PgViews PG_VIEWS = new PgViews();

    @Override
    @NotNull
    public Class<PgViewsRecord> getRecordType() {
        return PgViewsRecord.class;
    }

    public final TableField<PgViewsRecord, String> SCHEMANAME = createField(DSL.name("schemaname"), SQLDataType.VARCHAR, this, "");

    public final TableField<PgViewsRecord, String> VIEWNAME = createField(DSL.name("viewname"), SQLDataType.VARCHAR, this, "");

    public final TableField<PgViewsRecord, String> VIEWOWNER = createField(DSL.name("viewowner"), SQLDataType.VARCHAR, this, "");

    public final TableField<PgViewsRecord, String> DEFINITION = createField(DSL.name("definition"), SQLDataType.CLOB, this, "");

    private PgViews(Name alias, Table<PgViewsRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgViews(Name alias, Table<PgViewsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view());
    }

    public PgViews(String alias) {
        this(DSL.name(alias), PG_VIEWS);
    }

    public PgViews(Name alias) {
        this(alias, PG_VIEWS);
    }

    public PgViews() {
        this(DSL.name("pg_views"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public PgViews as(String alias) {
        return new PgViews(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public PgViews as(Name alias) {
        return new PgViews(alias, this);
    }

    @Override
    @NotNull
    public PgViews as(Table<?> alias) {
        return new PgViews(alias.getQualifiedName(), this);
    }

    @Override
    @NotNull
    public PgViews rename(String name) {
        return new PgViews(DSL.name(name), null);
    }

    @Override
    @NotNull
    public PgViews rename(Name name) {
        return new PgViews(name, null);
    }

    @Override
    @NotNull
    public PgViews rename(Table<?> name) {
        return new PgViews(name.getQualifiedName(), null);
    }
}
