/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.JsonbToRecordsetRecord;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JsonbToRecordset extends TableImpl<JsonbToRecordsetRecord> {

    private static final long serialVersionUID = 1L;

    public static final JsonbToRecordset JSONB_TO_RECORDSET = new JsonbToRecordset();

    @Override
    @NotNull
    public Class<JsonbToRecordsetRecord> getRecordType() {
        return JsonbToRecordsetRecord.class;
    }

    public final TableField<JsonbToRecordsetRecord, Record> JSONB_TO_RECORDSET_ = createField(DSL.name("jsonb_to_recordset"), SQLDataType.RECORD, this, "");

    private JsonbToRecordset(Name alias, Table<JsonbToRecordsetRecord> aliased) {
        this(alias, aliased, new Field[] {
            DSL.val(null, SQLDataType.JSONB)
        });
    }

    private JsonbToRecordset(Name alias, Table<JsonbToRecordsetRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    public JsonbToRecordset(String alias) {
        this(DSL.name(alias), JSONB_TO_RECORDSET);
    }

    public JsonbToRecordset(Name alias) {
        this(alias, JSONB_TO_RECORDSET);
    }

    public JsonbToRecordset() {
        this(DSL.name("jsonb_to_recordset"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public JsonbToRecordset as(String alias) {
        return new JsonbToRecordset(DSL.name(alias), this, parameters);
    }

    @Override
    @NotNull
    public JsonbToRecordset as(Name alias) {
        return new JsonbToRecordset(alias, this, parameters);
    }

    @Override
    @NotNull
    public JsonbToRecordset as(Table<?> alias) {
        return new JsonbToRecordset(alias.getQualifiedName(), this, parameters);
    }

    @Override
    @NotNull
    public JsonbToRecordset rename(String name) {
        return new JsonbToRecordset(DSL.name(name), null, parameters);
    }

    @Override
    @NotNull
    public JsonbToRecordset rename(Name name) {
        return new JsonbToRecordset(name, null, parameters);
    }

    @Override
    @NotNull
    public JsonbToRecordset rename(Table<?> name) {
        return new JsonbToRecordset(name.getQualifiedName(), null, parameters);
    }

    public JsonbToRecordset call(
          JSONB __1
    ) {
        JsonbToRecordset result = new JsonbToRecordset(DSL.name("jsonb_to_recordset"), null, new Field[] {
            DSL.val(__1, SQLDataType.JSONB)
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    public JsonbToRecordset call(
          Field<JSONB> __1
    ) {
        JsonbToRecordset result = new JsonbToRecordset(DSL.name("jsonb_to_recordset"), null, new Field[] {
            __1
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
