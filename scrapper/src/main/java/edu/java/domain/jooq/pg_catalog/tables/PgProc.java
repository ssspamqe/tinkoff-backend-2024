/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgProcRecord;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgProc extends TableImpl<PgProcRecord> {

    private static final long serialVersionUID = 1L;

    public static final PgProc PG_PROC = new PgProc();

    @Override
    @NotNull
    public Class<PgProcRecord> getRecordType() {
        return PgProcRecord.class;
    }

    public final TableField<PgProcRecord, Long> OID = createField(DSL.name("oid"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgProcRecord, String> PRONAME = createField(DSL.name("proname"), SQLDataType.VARCHAR.nullable(false), this, "");

    public final TableField<PgProcRecord, Long> PRONAMESPACE = createField(DSL.name("pronamespace"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgProcRecord, Long> PROOWNER = createField(DSL.name("proowner"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgProcRecord, Long> PROLANG = createField(DSL.name("prolang"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgProcRecord, Float> PROCOST = createField(DSL.name("procost"), SQLDataType.REAL.nullable(false), this, "");

    public final TableField<PgProcRecord, Float> PROROWS = createField(DSL.name("prorows"), SQLDataType.REAL.nullable(false), this, "");

    public final TableField<PgProcRecord, Long> PROVARIADIC = createField(DSL.name("provariadic"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgProcRecord, String> PROSUPPORT = createField(DSL.name("prosupport"), SQLDataType.VARCHAR.nullable(false), this, "");

    public final TableField<PgProcRecord, String> PROKIND = createField(DSL.name("prokind"), SQLDataType.CHAR.nullable(false), this, "");

    public final TableField<PgProcRecord, Boolean> PROSECDEF = createField(DSL.name("prosecdef"), SQLDataType.BOOLEAN.nullable(false), this, "");

    public final TableField<PgProcRecord, Boolean> PROLEAKPROOF = createField(DSL.name("proleakproof"), SQLDataType.BOOLEAN.nullable(false), this, "");

    public final TableField<PgProcRecord, Boolean> PROISSTRICT = createField(DSL.name("proisstrict"), SQLDataType.BOOLEAN.nullable(false), this, "");

    public final TableField<PgProcRecord, Boolean> PRORETSET = createField(DSL.name("proretset"), SQLDataType.BOOLEAN.nullable(false), this, "");

    public final TableField<PgProcRecord, String> PROVOLATILE = createField(DSL.name("provolatile"), SQLDataType.CHAR.nullable(false), this, "");

    public final TableField<PgProcRecord, String> PROPARALLEL = createField(DSL.name("proparallel"), SQLDataType.CHAR.nullable(false), this, "");

    public final TableField<PgProcRecord, Short> PRONARGS = createField(DSL.name("pronargs"), SQLDataType.SMALLINT.nullable(false), this, "");

    public final TableField<PgProcRecord, Short> PRONARGDEFAULTS = createField(DSL.name("pronargdefaults"), SQLDataType.SMALLINT.nullable(false), this, "");

    public final TableField<PgProcRecord, Long> PRORETTYPE = createField(DSL.name("prorettype"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgProcRecord, Object[]> PROARGTYPES = createField(DSL.name("proargtypes"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"idvector\"").nullable(false).array(), this, "");

    public final TableField<PgProcRecord, Long[]> PROALLARGTYPES = createField(DSL.name("proallargtypes"), SQLDataType.BIGINT.array(), this, "");

    public final TableField<PgProcRecord, String[]> PROARGMODES = createField(DSL.name("proargmodes"), SQLDataType.CHAR.array(), this, "");

    public final TableField<PgProcRecord, String[]> PROARGNAMES = createField(DSL.name("proargnames"), SQLDataType.CLOB.array(), this, "");

    @Deprecated
    public final TableField<PgProcRecord, Object> PROARGDEFAULTS = createField(DSL.name("proargdefaults"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_node_tree\""), this, "");

    public final TableField<PgProcRecord, Long[]> PROTRFTYPES = createField(DSL.name("protrftypes"), SQLDataType.BIGINT.array(), this, "");

    public final TableField<PgProcRecord, String> PROSRC = createField(DSL.name("prosrc"), SQLDataType.CLOB.nullable(false), this, "");

    public final TableField<PgProcRecord, String> PROBIN = createField(DSL.name("probin"), SQLDataType.CLOB, this, "");

    @Deprecated
    public final TableField<PgProcRecord, Object> PROSQLBODY = createField(DSL.name("prosqlbody"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_node_tree\""), this, "");

    public final TableField<PgProcRecord, String[]> PROCONFIG = createField(DSL.name("proconfig"), SQLDataType.CLOB.array(), this, "");

    public final TableField<PgProcRecord, String[]> PROACL = createField(DSL.name("proacl"), SQLDataType.VARCHAR.array(), this, "");

    private PgProc(Name alias, Table<PgProcRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgProc(Name alias, Table<PgProcRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public PgProc(String alias) {
        this(DSL.name(alias), PG_PROC);
    }

    public PgProc(Name alias) {
        this(alias, PG_PROC);
    }

    public PgProc() {
        this(DSL.name("pg_proc"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public PgProc as(String alias) {
        return new PgProc(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public PgProc as(Name alias) {
        return new PgProc(alias, this);
    }

    @Override
    @NotNull
    public PgProc as(Table<?> alias) {
        return new PgProc(alias.getQualifiedName(), this);
    }

    @Override
    @NotNull
    public PgProc rename(String name) {
        return new PgProc(DSL.name(name), null);
    }

    @Override
    @NotNull
    public PgProc rename(Name name) {
        return new PgProc(name, null);
    }

    @Override
    @NotNull
    public PgProc rename(Table<?> name) {
        return new PgProc(name.getQualifiedName(), null);
    }
}
