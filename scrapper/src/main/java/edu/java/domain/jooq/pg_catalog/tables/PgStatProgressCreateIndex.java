/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgStatProgressCreateIndexRecord;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgStatProgressCreateIndex extends TableImpl<PgStatProgressCreateIndexRecord> {

    private static final long serialVersionUID = 1L;

    public static final PgStatProgressCreateIndex PG_STAT_PROGRESS_CREATE_INDEX = new PgStatProgressCreateIndex();

    @Override
    @NotNull
    public Class<PgStatProgressCreateIndexRecord> getRecordType() {
        return PgStatProgressCreateIndexRecord.class;
    }

    public final TableField<PgStatProgressCreateIndexRecord, Integer> PID = createField(DSL.name("pid"), SQLDataType.INTEGER, this, "");

    public final TableField<PgStatProgressCreateIndexRecord, Long> DATID = createField(DSL.name("datid"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatProgressCreateIndexRecord, String> DATNAME = createField(DSL.name("datname"), SQLDataType.VARCHAR, this, "");

    public final TableField<PgStatProgressCreateIndexRecord, Long> RELID = createField(DSL.name("relid"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatProgressCreateIndexRecord, Long> INDEX_RELID = createField(DSL.name("index_relid"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatProgressCreateIndexRecord, String> COMMAND = createField(DSL.name("command"), SQLDataType.CLOB, this, "");

    public final TableField<PgStatProgressCreateIndexRecord, String> PHASE = createField(DSL.name("phase"), SQLDataType.CLOB, this, "");

    public final TableField<PgStatProgressCreateIndexRecord, Long> LOCKERS_TOTAL = createField(DSL.name("lockers_total"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatProgressCreateIndexRecord, Long> LOCKERS_DONE = createField(DSL.name("lockers_done"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatProgressCreateIndexRecord, Long> CURRENT_LOCKER_PID = createField(DSL.name("current_locker_pid"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatProgressCreateIndexRecord, Long> BLOCKS_TOTAL = createField(DSL.name("blocks_total"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatProgressCreateIndexRecord, Long> BLOCKS_DONE = createField(DSL.name("blocks_done"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatProgressCreateIndexRecord, Long> TUPLES_TOTAL = createField(DSL.name("tuples_total"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatProgressCreateIndexRecord, Long> TUPLES_DONE = createField(DSL.name("tuples_done"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatProgressCreateIndexRecord, Long> PARTITIONS_TOTAL = createField(DSL.name("partitions_total"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatProgressCreateIndexRecord, Long> PARTITIONS_DONE = createField(DSL.name("partitions_done"), SQLDataType.BIGINT, this, "");

    private PgStatProgressCreateIndex(Name alias, Table<PgStatProgressCreateIndexRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgStatProgressCreateIndex(Name alias, Table<PgStatProgressCreateIndexRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view());
    }

    public PgStatProgressCreateIndex(String alias) {
        this(DSL.name(alias), PG_STAT_PROGRESS_CREATE_INDEX);
    }

    public PgStatProgressCreateIndex(Name alias) {
        this(alias, PG_STAT_PROGRESS_CREATE_INDEX);
    }

    public PgStatProgressCreateIndex() {
        this(DSL.name("pg_stat_progress_create_index"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public PgStatProgressCreateIndex as(String alias) {
        return new PgStatProgressCreateIndex(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public PgStatProgressCreateIndex as(Name alias) {
        return new PgStatProgressCreateIndex(alias, this);
    }

    @Override
    @NotNull
    public PgStatProgressCreateIndex as(Table<?> alias) {
        return new PgStatProgressCreateIndex(alias.getQualifiedName(), this);
    }

    @Override
    @NotNull
    public PgStatProgressCreateIndex rename(String name) {
        return new PgStatProgressCreateIndex(DSL.name(name), null);
    }

    @Override
    @NotNull
    public PgStatProgressCreateIndex rename(Name name) {
        return new PgStatProgressCreateIndex(name, null);
    }

    @Override
    @NotNull
    public PgStatProgressCreateIndex rename(Table<?> name) {
        return new PgStatProgressCreateIndex(name.getQualifiedName(), null);
    }
}
