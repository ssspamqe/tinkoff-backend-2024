/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgGetReplicationSlotsRecord;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgGetReplicationSlots extends TableImpl<PgGetReplicationSlotsRecord> {

    private static final long serialVersionUID = 1L;

    public static final PgGetReplicationSlots PG_GET_REPLICATION_SLOTS = new PgGetReplicationSlots();

    @Override
    @NotNull
    public Class<PgGetReplicationSlotsRecord> getRecordType() {
        return PgGetReplicationSlotsRecord.class;
    }

    public final TableField<PgGetReplicationSlotsRecord, String> SLOT_NAME = createField(DSL.name("slot_name"), SQLDataType.VARCHAR, this, "");

    public final TableField<PgGetReplicationSlotsRecord, String> PLUGIN = createField(DSL.name("plugin"), SQLDataType.VARCHAR, this, "");

    public final TableField<PgGetReplicationSlotsRecord, String> SLOT_TYPE = createField(DSL.name("slot_type"), SQLDataType.CLOB, this, "");

    public final TableField<PgGetReplicationSlotsRecord, Long> DATOID = createField(DSL.name("datoid"), SQLDataType.BIGINT, this, "");

    public final TableField<PgGetReplicationSlotsRecord, Boolean> TEMPORARY = createField(DSL.name("temporary"), SQLDataType.BOOLEAN, this, "");

    public final TableField<PgGetReplicationSlotsRecord, Boolean> ACTIVE = createField(DSL.name("active"), SQLDataType.BOOLEAN, this, "");

    public final TableField<PgGetReplicationSlotsRecord, Integer> ACTIVE_PID = createField(DSL.name("active_pid"), SQLDataType.INTEGER, this, "");

    public final TableField<PgGetReplicationSlotsRecord, Long> XMIN = createField(DSL.name("xmin"), SQLDataType.BIGINT, this, "");

    public final TableField<PgGetReplicationSlotsRecord, Long> CATALOG_XMIN = createField(DSL.name("catalog_xmin"), SQLDataType.BIGINT, this, "");

    @Deprecated
    public final TableField<PgGetReplicationSlotsRecord, Object> RESTART_LSN = createField(DSL.name("restart_lsn"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_lsn\""), this, "");

    @Deprecated
    public final TableField<PgGetReplicationSlotsRecord, Object> CONFIRMED_FLUSH_LSN = createField(DSL.name("confirmed_flush_lsn"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_lsn\""), this, "");

    public final TableField<PgGetReplicationSlotsRecord, String> WAL_STATUS = createField(DSL.name("wal_status"), SQLDataType.CLOB, this, "");

    public final TableField<PgGetReplicationSlotsRecord, Long> SAFE_WAL_SIZE = createField(DSL.name("safe_wal_size"), SQLDataType.BIGINT, this, "");

    public final TableField<PgGetReplicationSlotsRecord, Boolean> TWO_PHASE = createField(DSL.name("two_phase"), SQLDataType.BOOLEAN, this, "");

    public final TableField<PgGetReplicationSlotsRecord, Boolean> CONFLICTING = createField(DSL.name("conflicting"), SQLDataType.BOOLEAN, this, "");

    private PgGetReplicationSlots(Name alias, Table<PgGetReplicationSlotsRecord> aliased) {
        this(alias, aliased, new Field[] {
        });
    }

    private PgGetReplicationSlots(Name alias, Table<PgGetReplicationSlotsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    public PgGetReplicationSlots(String alias) {
        this(DSL.name(alias), PG_GET_REPLICATION_SLOTS);
    }

    public PgGetReplicationSlots(Name alias) {
        this(alias, PG_GET_REPLICATION_SLOTS);
    }

    public PgGetReplicationSlots() {
        this(DSL.name("pg_get_replication_slots"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public PgGetReplicationSlots as(String alias) {
        return new PgGetReplicationSlots(DSL.name(alias), this, parameters);
    }

    @Override
    @NotNull
    public PgGetReplicationSlots as(Name alias) {
        return new PgGetReplicationSlots(alias, this, parameters);
    }

    @Override
    @NotNull
    public PgGetReplicationSlots as(Table<?> alias) {
        return new PgGetReplicationSlots(alias.getQualifiedName(), this, parameters);
    }

    @Override
    @NotNull
    public PgGetReplicationSlots rename(String name) {
        return new PgGetReplicationSlots(DSL.name(name), null, parameters);
    }

    @Override
    @NotNull
    public PgGetReplicationSlots rename(Name name) {
        return new PgGetReplicationSlots(name, null, parameters);
    }

    @Override
    @NotNull
    public PgGetReplicationSlots rename(Table<?> name) {
        return new PgGetReplicationSlots(name.getQualifiedName(), null, parameters);
    }

    public PgGetReplicationSlots call() {
        PgGetReplicationSlots result = new PgGetReplicationSlots(DSL.name("pg_get_replication_slots"), null, new Field[] {});

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
