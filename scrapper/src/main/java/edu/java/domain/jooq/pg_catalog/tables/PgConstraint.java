/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgConstraintRecord;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgConstraint extends TableImpl<PgConstraintRecord> {

    private static final long serialVersionUID = 1L;

    public static final PgConstraint PG_CONSTRAINT = new PgConstraint();

    @Override
    @NotNull
    public Class<PgConstraintRecord> getRecordType() {
        return PgConstraintRecord.class;
    }

    public final TableField<PgConstraintRecord, Long> OID = createField(DSL.name("oid"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgConstraintRecord, String> CONNAME = createField(DSL.name("conname"), SQLDataType.VARCHAR.nullable(false), this, "");

    public final TableField<PgConstraintRecord, Long> CONNAMESPACE = createField(DSL.name("connamespace"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgConstraintRecord, String> CONTYPE = createField(DSL.name("contype"), SQLDataType.CHAR.nullable(false), this, "");

    public final TableField<PgConstraintRecord, Boolean> CONDEFERRABLE = createField(DSL.name("condeferrable"), SQLDataType.BOOLEAN.nullable(false), this, "");

    public final TableField<PgConstraintRecord, Boolean> CONDEFERRED = createField(DSL.name("condeferred"), SQLDataType.BOOLEAN.nullable(false), this, "");

    public final TableField<PgConstraintRecord, Boolean> CONVALIDATED = createField(DSL.name("convalidated"), SQLDataType.BOOLEAN.nullable(false), this, "");

    public final TableField<PgConstraintRecord, Long> CONRELID = createField(DSL.name("conrelid"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgConstraintRecord, Long> CONTYPID = createField(DSL.name("contypid"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgConstraintRecord, Long> CONINDID = createField(DSL.name("conindid"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgConstraintRecord, Long> CONPARENTID = createField(DSL.name("conparentid"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgConstraintRecord, Long> CONFRELID = createField(DSL.name("confrelid"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgConstraintRecord, String> CONFUPDTYPE = createField(DSL.name("confupdtype"), SQLDataType.CHAR.nullable(false), this, "");

    public final TableField<PgConstraintRecord, String> CONFDELTYPE = createField(DSL.name("confdeltype"), SQLDataType.CHAR.nullable(false), this, "");

    public final TableField<PgConstraintRecord, String> CONFMATCHTYPE = createField(DSL.name("confmatchtype"), SQLDataType.CHAR.nullable(false), this, "");

    public final TableField<PgConstraintRecord, Boolean> CONISLOCAL = createField(DSL.name("conislocal"), SQLDataType.BOOLEAN.nullable(false), this, "");

    public final TableField<PgConstraintRecord, Short> CONINHCOUNT = createField(DSL.name("coninhcount"), SQLDataType.SMALLINT.nullable(false), this, "");

    public final TableField<PgConstraintRecord, Boolean> CONNOINHERIT = createField(DSL.name("connoinherit"), SQLDataType.BOOLEAN.nullable(false), this, "");

    public final TableField<PgConstraintRecord, Short[]> CONKEY = createField(DSL.name("conkey"), SQLDataType.SMALLINT.array(), this, "");

    public final TableField<PgConstraintRecord, Short[]> CONFKEY = createField(DSL.name("confkey"), SQLDataType.SMALLINT.array(), this, "");

    public final TableField<PgConstraintRecord, Long[]> CONPFEQOP = createField(DSL.name("conpfeqop"), SQLDataType.BIGINT.array(), this, "");

    public final TableField<PgConstraintRecord, Long[]> CONPPEQOP = createField(DSL.name("conppeqop"), SQLDataType.BIGINT.array(), this, "");

    public final TableField<PgConstraintRecord, Long[]> CONFFEQOP = createField(DSL.name("conffeqop"), SQLDataType.BIGINT.array(), this, "");

    public final TableField<PgConstraintRecord, Short[]> CONFDELSETCOLS = createField(DSL.name("confdelsetcols"), SQLDataType.SMALLINT.array(), this, "");

    public final TableField<PgConstraintRecord, Long[]> CONEXCLOP = createField(DSL.name("conexclop"), SQLDataType.BIGINT.array(), this, "");

    @Deprecated
    public final TableField<PgConstraintRecord, Object> CONBIN = createField(DSL.name("conbin"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_node_tree\""), this, "");

    private PgConstraint(Name alias, Table<PgConstraintRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgConstraint(Name alias, Table<PgConstraintRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public PgConstraint(String alias) {
        this(DSL.name(alias), PG_CONSTRAINT);
    }

    public PgConstraint(Name alias) {
        this(alias, PG_CONSTRAINT);
    }

    public PgConstraint() {
        this(DSL.name("pg_constraint"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public PgConstraint as(String alias) {
        return new PgConstraint(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public PgConstraint as(Name alias) {
        return new PgConstraint(alias, this);
    }

    @Override
    @NotNull
    public PgConstraint as(Table<?> alias) {
        return new PgConstraint(alias.getQualifiedName(), this);
    }

    @Override
    @NotNull
    public PgConstraint rename(String name) {
        return new PgConstraint(DSL.name(name), null);
    }

    @Override
    @NotNull
    public PgConstraint rename(Name name) {
        return new PgConstraint(name, null);
    }

    @Override
    @NotNull
    public PgConstraint rename(Table<?> name) {
        return new PgConstraint(name.getQualifiedName(), null);
    }
}
