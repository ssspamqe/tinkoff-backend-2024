/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables.pojos;


import java.beans.ConstructorProperties;
import java.io.Serializable;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgRange implements Serializable {

    private static final long serialVersionUID = 1L;

    private Long rngtypid;
    private Long rngsubtype;
    private Long rngmultitypid;
    private Long rngcollation;
    private Long rngsubopc;
    private String rngcanonical;
    private String rngsubdiff;

    public PgRange() {}

    public PgRange(PgRange value) {
        this.rngtypid = value.rngtypid;
        this.rngsubtype = value.rngsubtype;
        this.rngmultitypid = value.rngmultitypid;
        this.rngcollation = value.rngcollation;
        this.rngsubopc = value.rngsubopc;
        this.rngcanonical = value.rngcanonical;
        this.rngsubdiff = value.rngsubdiff;
    }

    @ConstructorProperties({ "rngtypid", "rngsubtype", "rngmultitypid", "rngcollation", "rngsubopc", "rngcanonical", "rngsubdiff" })
    public PgRange(
        @NotNull Long rngtypid,
        @NotNull Long rngsubtype,
        @NotNull Long rngmultitypid,
        @NotNull Long rngcollation,
        @NotNull Long rngsubopc,
        @NotNull String rngcanonical,
        @NotNull String rngsubdiff
    ) {
        this.rngtypid = rngtypid;
        this.rngsubtype = rngsubtype;
        this.rngmultitypid = rngmultitypid;
        this.rngcollation = rngcollation;
        this.rngsubopc = rngsubopc;
        this.rngcanonical = rngcanonical;
        this.rngsubdiff = rngsubdiff;
    }

    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getRngtypid() {
        return this.rngtypid;
    }

    public void setRngtypid(@NotNull Long rngtypid) {
        this.rngtypid = rngtypid;
    }

    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getRngsubtype() {
        return this.rngsubtype;
    }

    public void setRngsubtype(@NotNull Long rngsubtype) {
        this.rngsubtype = rngsubtype;
    }

    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getRngmultitypid() {
        return this.rngmultitypid;
    }

    public void setRngmultitypid(@NotNull Long rngmultitypid) {
        this.rngmultitypid = rngmultitypid;
    }

    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getRngcollation() {
        return this.rngcollation;
    }

    public void setRngcollation(@NotNull Long rngcollation) {
        this.rngcollation = rngcollation;
    }

    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getRngsubopc() {
        return this.rngsubopc;
    }

    public void setRngsubopc(@NotNull Long rngsubopc) {
        this.rngsubopc = rngsubopc;
    }

    @jakarta.validation.constraints.NotNull
    @NotNull
    public String getRngcanonical() {
        return this.rngcanonical;
    }

    public void setRngcanonical(@NotNull String rngcanonical) {
        this.rngcanonical = rngcanonical;
    }

    @jakarta.validation.constraints.NotNull
    @NotNull
    public String getRngsubdiff() {
        return this.rngsubdiff;
    }

    public void setRngsubdiff(@NotNull String rngsubdiff) {
        this.rngsubdiff = rngsubdiff;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final PgRange other = (PgRange) obj;
        if (this.rngtypid == null) {
            if (other.rngtypid != null)
                return false;
        }
        else if (!this.rngtypid.equals(other.rngtypid))
            return false;
        if (this.rngsubtype == null) {
            if (other.rngsubtype != null)
                return false;
        }
        else if (!this.rngsubtype.equals(other.rngsubtype))
            return false;
        if (this.rngmultitypid == null) {
            if (other.rngmultitypid != null)
                return false;
        }
        else if (!this.rngmultitypid.equals(other.rngmultitypid))
            return false;
        if (this.rngcollation == null) {
            if (other.rngcollation != null)
                return false;
        }
        else if (!this.rngcollation.equals(other.rngcollation))
            return false;
        if (this.rngsubopc == null) {
            if (other.rngsubopc != null)
                return false;
        }
        else if (!this.rngsubopc.equals(other.rngsubopc))
            return false;
        if (this.rngcanonical == null) {
            if (other.rngcanonical != null)
                return false;
        }
        else if (!this.rngcanonical.equals(other.rngcanonical))
            return false;
        if (this.rngsubdiff == null) {
            if (other.rngsubdiff != null)
                return false;
        }
        else if (!this.rngsubdiff.equals(other.rngsubdiff))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.rngtypid == null) ? 0 : this.rngtypid.hashCode());
        result = prime * result + ((this.rngsubtype == null) ? 0 : this.rngsubtype.hashCode());
        result = prime * result + ((this.rngmultitypid == null) ? 0 : this.rngmultitypid.hashCode());
        result = prime * result + ((this.rngcollation == null) ? 0 : this.rngcollation.hashCode());
        result = prime * result + ((this.rngsubopc == null) ? 0 : this.rngsubopc.hashCode());
        result = prime * result + ((this.rngcanonical == null) ? 0 : this.rngcanonical.hashCode());
        result = prime * result + ((this.rngsubdiff == null) ? 0 : this.rngsubdiff.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("PgRange (");

        sb.append(rngtypid);
        sb.append(", ").append(rngsubtype);
        sb.append(", ").append(rngmultitypid);
        sb.append(", ").append(rngcollation);
        sb.append(", ").append(rngsubopc);
        sb.append(", ").append(rngcanonical);
        sb.append(", ").append(rngsubdiff);

        sb.append(")");
        return sb.toString();
    }
}
