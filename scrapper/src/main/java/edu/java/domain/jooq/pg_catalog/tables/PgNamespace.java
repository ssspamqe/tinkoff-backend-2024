/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgNamespaceRecord;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgNamespace extends TableImpl<PgNamespaceRecord> {

    private static final long serialVersionUID = 1L;

    public static final PgNamespace PG_NAMESPACE = new PgNamespace();

    @Override
    @NotNull
    public Class<PgNamespaceRecord> getRecordType() {
        return PgNamespaceRecord.class;
    }

    public final TableField<PgNamespaceRecord, Long> OID = createField(DSL.name("oid"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgNamespaceRecord, String> NSPNAME = createField(DSL.name("nspname"), SQLDataType.VARCHAR.nullable(false), this, "");

    public final TableField<PgNamespaceRecord, Long> NSPOWNER = createField(DSL.name("nspowner"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgNamespaceRecord, String[]> NSPACL = createField(DSL.name("nspacl"), SQLDataType.VARCHAR.array(), this, "");

    private PgNamespace(Name alias, Table<PgNamespaceRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgNamespace(Name alias, Table<PgNamespaceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public PgNamespace(String alias) {
        this(DSL.name(alias), PG_NAMESPACE);
    }

    public PgNamespace(Name alias) {
        this(alias, PG_NAMESPACE);
    }

    public PgNamespace() {
        this(DSL.name("pg_namespace"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public PgNamespace as(String alias) {
        return new PgNamespace(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public PgNamespace as(Name alias) {
        return new PgNamespace(alias, this);
    }

    @Override
    @NotNull
    public PgNamespace as(Table<?> alias) {
        return new PgNamespace(alias.getQualifiedName(), this);
    }

    @Override
    @NotNull
    public PgNamespace rename(String name) {
        return new PgNamespace(DSL.name(name), null);
    }

    @Override
    @NotNull
    public PgNamespace rename(Name name) {
        return new PgNamespace(name, null);
    }

    @Override
    @NotNull
    public PgNamespace rename(Table<?> name) {
        return new PgNamespace(name.getQualifiedName(), null);
    }
}
