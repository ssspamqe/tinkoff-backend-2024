/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgOpclassRecord;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgOpclass extends TableImpl<PgOpclassRecord> {

    private static final long serialVersionUID = 1L;

    public static final PgOpclass PG_OPCLASS = new PgOpclass();

    @Override
    @NotNull
    public Class<PgOpclassRecord> getRecordType() {
        return PgOpclassRecord.class;
    }

    public final TableField<PgOpclassRecord, Long> OID = createField(DSL.name("oid"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgOpclassRecord, Long> OPCMETHOD = createField(DSL.name("opcmethod"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgOpclassRecord, String> OPCNAME = createField(DSL.name("opcname"), SQLDataType.VARCHAR.nullable(false), this, "");

    public final TableField<PgOpclassRecord, Long> OPCNAMESPACE = createField(DSL.name("opcnamespace"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgOpclassRecord, Long> OPCOWNER = createField(DSL.name("opcowner"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgOpclassRecord, Long> OPCFAMILY = createField(DSL.name("opcfamily"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgOpclassRecord, Long> OPCINTYPE = createField(DSL.name("opcintype"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgOpclassRecord, Boolean> OPCDEFAULT = createField(DSL.name("opcdefault"), SQLDataType.BOOLEAN.nullable(false), this, "");

    public final TableField<PgOpclassRecord, Long> OPCKEYTYPE = createField(DSL.name("opckeytype"), SQLDataType.BIGINT.nullable(false), this, "");

    private PgOpclass(Name alias, Table<PgOpclassRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgOpclass(Name alias, Table<PgOpclassRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public PgOpclass(String alias) {
        this(DSL.name(alias), PG_OPCLASS);
    }

    public PgOpclass(Name alias) {
        this(alias, PG_OPCLASS);
    }

    public PgOpclass() {
        this(DSL.name("pg_opclass"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public PgOpclass as(String alias) {
        return new PgOpclass(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public PgOpclass as(Name alias) {
        return new PgOpclass(alias, this);
    }

    @Override
    @NotNull
    public PgOpclass as(Table<?> alias) {
        return new PgOpclass(alias.getQualifiedName(), this);
    }

    @Override
    @NotNull
    public PgOpclass rename(String name) {
        return new PgOpclass(DSL.name(name), null);
    }

    @Override
    @NotNull
    public PgOpclass rename(Name name) {
        return new PgOpclass(name, null);
    }

    @Override
    @NotNull
    public PgOpclass rename(Table<?> name) {
        return new PgOpclass(name.getQualifiedName(), null);
    }
}
