/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.TsStatRecord;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TsStat extends TableImpl<TsStatRecord> {

    private static final long serialVersionUID = 1L;

    public static final TsStat TS_STAT = new TsStat();

    @Override
    @NotNull
    public Class<TsStatRecord> getRecordType() {
        return TsStatRecord.class;
    }

    public final TableField<TsStatRecord, String> WORD = createField(DSL.name("word"), SQLDataType.CLOB, this, "");

    public final TableField<TsStatRecord, Integer> NDOC = createField(DSL.name("ndoc"), SQLDataType.INTEGER, this, "");

    public final TableField<TsStatRecord, Integer> NENTRY = createField(DSL.name("nentry"), SQLDataType.INTEGER, this, "");

    private TsStat(Name alias, Table<TsStatRecord> aliased) {
        this(alias, aliased, new Field[] {
            DSL.val(null, SQLDataType.CLOB),
            DSL.val(null, SQLDataType.CLOB)
        });
    }

    private TsStat(Name alias, Table<TsStatRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    public TsStat(String alias) {
        this(DSL.name(alias), TS_STAT);
    }

    public TsStat(Name alias) {
        this(alias, TS_STAT);
    }

    public TsStat() {
        this(DSL.name("ts_stat"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public TsStat as(String alias) {
        return new TsStat(DSL.name(alias), this, parameters);
    }

    @Override
    @NotNull
    public TsStat as(Name alias) {
        return new TsStat(alias, this, parameters);
    }

    @Override
    @NotNull
    public TsStat as(Table<?> alias) {
        return new TsStat(alias.getQualifiedName(), this, parameters);
    }

    @Override
    @NotNull
    public TsStat rename(String name) {
        return new TsStat(DSL.name(name), null, parameters);
    }

    @Override
    @NotNull
    public TsStat rename(Name name) {
        return new TsStat(name, null, parameters);
    }

    @Override
    @NotNull
    public TsStat rename(Table<?> name) {
        return new TsStat(name.getQualifiedName(), null, parameters);
    }

    public TsStat call(
          String query
        , String weights
    ) {
        TsStat result = new TsStat(DSL.name("ts_stat"), null, new Field[] {
            DSL.val(query, SQLDataType.CLOB),
            DSL.val(weights, SQLDataType.CLOB)
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    public TsStat call(
          Field<String> query
        , Field<String> weights
    ) {
        TsStat result = new TsStat(DSL.name("ts_stat"), null, new Field[] {
            query,
            weights
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
