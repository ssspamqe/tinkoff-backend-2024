/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgPreparedXactRecord;

import java.time.OffsetDateTime;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgPreparedXact extends TableImpl<PgPreparedXactRecord> {

    private static final long serialVersionUID = 1L;

    public static final PgPreparedXact PG_PREPARED_XACT = new PgPreparedXact();

    @Override
    @NotNull
    public Class<PgPreparedXactRecord> getRecordType() {
        return PgPreparedXactRecord.class;
    }

    public final TableField<PgPreparedXactRecord, Long> TRANSACTION = createField(DSL.name("transaction"), SQLDataType.BIGINT, this, "");

    public final TableField<PgPreparedXactRecord, String> GID = createField(DSL.name("gid"), SQLDataType.CLOB, this, "");

    public final TableField<PgPreparedXactRecord, OffsetDateTime> PREPARED = createField(DSL.name("prepared"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    public final TableField<PgPreparedXactRecord, Long> OWNERID = createField(DSL.name("ownerid"), SQLDataType.BIGINT, this, "");

    public final TableField<PgPreparedXactRecord, Long> DBID = createField(DSL.name("dbid"), SQLDataType.BIGINT, this, "");

    private PgPreparedXact(Name alias, Table<PgPreparedXactRecord> aliased) {
        this(alias, aliased, new Field[] {
        });
    }

    private PgPreparedXact(Name alias, Table<PgPreparedXactRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    public PgPreparedXact(String alias) {
        this(DSL.name(alias), PG_PREPARED_XACT);
    }

    public PgPreparedXact(Name alias) {
        this(alias, PG_PREPARED_XACT);
    }

    public PgPreparedXact() {
        this(DSL.name("pg_prepared_xact"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public PgPreparedXact as(String alias) {
        return new PgPreparedXact(DSL.name(alias), this, parameters);
    }

    @Override
    @NotNull
    public PgPreparedXact as(Name alias) {
        return new PgPreparedXact(alias, this, parameters);
    }

    @Override
    @NotNull
    public PgPreparedXact as(Table<?> alias) {
        return new PgPreparedXact(alias.getQualifiedName(), this, parameters);
    }

    @Override
    @NotNull
    public PgPreparedXact rename(String name) {
        return new PgPreparedXact(DSL.name(name), null, parameters);
    }

    @Override
    @NotNull
    public PgPreparedXact rename(Name name) {
        return new PgPreparedXact(name, null, parameters);
    }

    @Override
    @NotNull
    public PgPreparedXact rename(Table<?> name) {
        return new PgPreparedXact(name.getQualifiedName(), null, parameters);
    }

    public PgPreparedXact call() {
        PgPreparedXact result = new PgPreparedXact(DSL.name("pg_prepared_xact"), null, new Field[] {});

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
