/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.RegexpMatchesRecord;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class RegexpMatches extends TableImpl<RegexpMatchesRecord> {

    private static final long serialVersionUID = 1L;

    public static final RegexpMatches REGEXP_MATCHES = new RegexpMatches();

    @Override
    @NotNull
    public Class<RegexpMatchesRecord> getRecordType() {
        return RegexpMatchesRecord.class;
    }

    public final TableField<RegexpMatchesRecord, String[]> REGEXP_MATCHES_ = createField(DSL.name("regexp_matches"), SQLDataType.CLOB.array(), this, "");

    private RegexpMatches(Name alias, Table<RegexpMatchesRecord> aliased) {
        this(alias, aliased, new Field[] {
            DSL.val(null, SQLDataType.CLOB),
            DSL.val(null, SQLDataType.CLOB),
            DSL.val(null, SQLDataType.CLOB)
        });
    }

    private RegexpMatches(Name alias, Table<RegexpMatchesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    public RegexpMatches(String alias) {
        this(DSL.name(alias), REGEXP_MATCHES);
    }

    public RegexpMatches(Name alias) {
        this(alias, REGEXP_MATCHES);
    }

    public RegexpMatches() {
        this(DSL.name("regexp_matches"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public RegexpMatches as(String alias) {
        return new RegexpMatches(DSL.name(alias), this, parameters);
    }

    @Override
    @NotNull
    public RegexpMatches as(Name alias) {
        return new RegexpMatches(alias, this, parameters);
    }

    @Override
    @NotNull
    public RegexpMatches as(Table<?> alias) {
        return new RegexpMatches(alias.getQualifiedName(), this, parameters);
    }

    @Override
    @NotNull
    public RegexpMatches rename(String name) {
        return new RegexpMatches(DSL.name(name), null, parameters);
    }

    @Override
    @NotNull
    public RegexpMatches rename(Name name) {
        return new RegexpMatches(name, null, parameters);
    }

    @Override
    @NotNull
    public RegexpMatches rename(Table<?> name) {
        return new RegexpMatches(name.getQualifiedName(), null, parameters);
    }

    public RegexpMatches call(
          String __1
        , String __2
        , String __3
    ) {
        RegexpMatches result = new RegexpMatches(DSL.name("regexp_matches"), null, new Field[] {
            DSL.val(__1, SQLDataType.CLOB),
            DSL.val(__2, SQLDataType.CLOB),
            DSL.val(__3, SQLDataType.CLOB)
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    public RegexpMatches call(
          Field<String> __1
        , Field<String> __2
        , Field<String> __3
    ) {
        RegexpMatches result = new RegexpMatches(DSL.name("regexp_matches"), null, new Field[] {
            __1,
            __2,
            __3
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
