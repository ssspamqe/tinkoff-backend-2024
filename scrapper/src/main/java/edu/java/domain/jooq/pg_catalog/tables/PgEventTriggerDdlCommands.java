/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgEventTriggerDdlCommandsRecord;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgEventTriggerDdlCommands extends TableImpl<PgEventTriggerDdlCommandsRecord> {

    private static final long serialVersionUID = 1L;

    public static final PgEventTriggerDdlCommands PG_EVENT_TRIGGER_DDL_COMMANDS = new PgEventTriggerDdlCommands();

    @Override
    @NotNull
    public Class<PgEventTriggerDdlCommandsRecord> getRecordType() {
        return PgEventTriggerDdlCommandsRecord.class;
    }

    public final TableField<PgEventTriggerDdlCommandsRecord, Long> CLASSID = createField(DSL.name("classid"), SQLDataType.BIGINT, this, "");

    public final TableField<PgEventTriggerDdlCommandsRecord, Long> OBJID = createField(DSL.name("objid"), SQLDataType.BIGINT, this, "");

    public final TableField<PgEventTriggerDdlCommandsRecord, Integer> OBJSUBID = createField(DSL.name("objsubid"), SQLDataType.INTEGER, this, "");

    public final TableField<PgEventTriggerDdlCommandsRecord, String> COMMAND_TAG = createField(DSL.name("command_tag"), SQLDataType.CLOB, this, "");

    public final TableField<PgEventTriggerDdlCommandsRecord, String> OBJECT_TYPE = createField(DSL.name("object_type"), SQLDataType.CLOB, this, "");

    public final TableField<PgEventTriggerDdlCommandsRecord, String> SCHEMA_NAME = createField(DSL.name("schema_name"), SQLDataType.CLOB, this, "");

    public final TableField<PgEventTriggerDdlCommandsRecord, String> OBJECT_IDENTITY = createField(DSL.name("object_identity"), SQLDataType.CLOB, this, "");

    public final TableField<PgEventTriggerDdlCommandsRecord, Boolean> IN_EXTENSION = createField(DSL.name("in_extension"), SQLDataType.BOOLEAN, this, "");

    @Deprecated
    public final TableField<PgEventTriggerDdlCommandsRecord, Object> COMMAND = createField(DSL.name("command"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_ddl_command\""), this, "");

    private PgEventTriggerDdlCommands(Name alias, Table<PgEventTriggerDdlCommandsRecord> aliased) {
        this(alias, aliased, new Field[] {
        });
    }

    private PgEventTriggerDdlCommands(Name alias, Table<PgEventTriggerDdlCommandsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    public PgEventTriggerDdlCommands(String alias) {
        this(DSL.name(alias), PG_EVENT_TRIGGER_DDL_COMMANDS);
    }

    public PgEventTriggerDdlCommands(Name alias) {
        this(alias, PG_EVENT_TRIGGER_DDL_COMMANDS);
    }

    public PgEventTriggerDdlCommands() {
        this(DSL.name("pg_event_trigger_ddl_commands"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public PgEventTriggerDdlCommands as(String alias) {
        return new PgEventTriggerDdlCommands(DSL.name(alias), this, parameters);
    }

    @Override
    @NotNull
    public PgEventTriggerDdlCommands as(Name alias) {
        return new PgEventTriggerDdlCommands(alias, this, parameters);
    }

    @Override
    @NotNull
    public PgEventTriggerDdlCommands as(Table<?> alias) {
        return new PgEventTriggerDdlCommands(alias.getQualifiedName(), this, parameters);
    }

    @Override
    @NotNull
    public PgEventTriggerDdlCommands rename(String name) {
        return new PgEventTriggerDdlCommands(DSL.name(name), null, parameters);
    }

    @Override
    @NotNull
    public PgEventTriggerDdlCommands rename(Name name) {
        return new PgEventTriggerDdlCommands(name, null, parameters);
    }

    @Override
    @NotNull
    public PgEventTriggerDdlCommands rename(Table<?> name) {
        return new PgEventTriggerDdlCommands(name.getQualifiedName(), null, parameters);
    }

    public PgEventTriggerDdlCommands call() {
        PgEventTriggerDdlCommands result = new PgEventTriggerDdlCommands(DSL.name("pg_event_trigger_ddl_commands"), null, new Field[] {});

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
