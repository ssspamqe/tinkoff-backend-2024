/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.information_schema.tables;


import edu.java.domain.jooq.information_schema.InformationSchema;
import edu.java.domain.jooq.information_schema.tables.records._PgForeignTableColumnsRecord;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class _PgForeignTableColumns extends TableImpl<_PgForeignTableColumnsRecord> {

    private static final long serialVersionUID = 1L;

    public static final _PgForeignTableColumns _PG_FOREIGN_TABLE_COLUMNS = new _PgForeignTableColumns();

    @Override
    @NotNull
    public Class<_PgForeignTableColumnsRecord> getRecordType() {
        return _PgForeignTableColumnsRecord.class;
    }

    public final TableField<_PgForeignTableColumnsRecord, String> NSPNAME = createField(DSL.name("nspname"), SQLDataType.VARCHAR, this, "");

    public final TableField<_PgForeignTableColumnsRecord, String> RELNAME = createField(DSL.name("relname"), SQLDataType.VARCHAR, this, "");

    public final TableField<_PgForeignTableColumnsRecord, String> ATTNAME = createField(DSL.name("attname"), SQLDataType.VARCHAR, this, "");

    public final TableField<_PgForeignTableColumnsRecord, String[]> ATTFDWOPTIONS = createField(DSL.name("attfdwoptions"), SQLDataType.CLOB.array(), this, "");

    private _PgForeignTableColumns(Name alias, Table<_PgForeignTableColumnsRecord> aliased) {
        this(alias, aliased, null);
    }

    private _PgForeignTableColumns(Name alias, Table<_PgForeignTableColumnsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view());
    }

    public _PgForeignTableColumns(String alias) {
        this(DSL.name(alias), _PG_FOREIGN_TABLE_COLUMNS);
    }

    public _PgForeignTableColumns(Name alias) {
        this(alias, _PG_FOREIGN_TABLE_COLUMNS);
    }

    public _PgForeignTableColumns() {
        this(DSL.name("_pg_foreign_table_columns"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    @NotNull
    public _PgForeignTableColumns as(String alias) {
        return new _PgForeignTableColumns(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public _PgForeignTableColumns as(Name alias) {
        return new _PgForeignTableColumns(alias, this);
    }

    @Override
    @NotNull
    public _PgForeignTableColumns as(Table<?> alias) {
        return new _PgForeignTableColumns(alias.getQualifiedName(), this);
    }

    @Override
    @NotNull
    public _PgForeignTableColumns rename(String name) {
        return new _PgForeignTableColumns(DSL.name(name), null);
    }

    @Override
    @NotNull
    public _PgForeignTableColumns rename(Name name) {
        return new _PgForeignTableColumns(name, null);
    }

    @Override
    @NotNull
    public _PgForeignTableColumns rename(Table<?> name) {
        return new _PgForeignTableColumns(name.getQualifiedName(), null);
    }
}
