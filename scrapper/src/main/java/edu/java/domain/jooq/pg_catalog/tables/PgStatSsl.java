/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgStatSslRecord;

import java.math.BigDecimal;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgStatSsl extends TableImpl<PgStatSslRecord> {

    private static final long serialVersionUID = 1L;

    public static final PgStatSsl PG_STAT_SSL = new PgStatSsl();

    @Override
    @NotNull
    public Class<PgStatSslRecord> getRecordType() {
        return PgStatSslRecord.class;
    }

    public final TableField<PgStatSslRecord, Integer> PID = createField(DSL.name("pid"), SQLDataType.INTEGER, this, "");

    public final TableField<PgStatSslRecord, Boolean> SSL = createField(DSL.name("ssl"), SQLDataType.BOOLEAN, this, "");

    public final TableField<PgStatSslRecord, String> VERSION = createField(DSL.name("version"), SQLDataType.CLOB, this, "");

    public final TableField<PgStatSslRecord, String> CIPHER = createField(DSL.name("cipher"), SQLDataType.CLOB, this, "");

    public final TableField<PgStatSslRecord, Integer> BITS = createField(DSL.name("bits"), SQLDataType.INTEGER, this, "");

    public final TableField<PgStatSslRecord, String> CLIENT_DN = createField(DSL.name("client_dn"), SQLDataType.CLOB, this, "");

    public final TableField<PgStatSslRecord, BigDecimal> CLIENT_SERIAL = createField(DSL.name("client_serial"), SQLDataType.NUMERIC, this, "");

    public final TableField<PgStatSslRecord, String> ISSUER_DN = createField(DSL.name("issuer_dn"), SQLDataType.CLOB, this, "");

    private PgStatSsl(Name alias, Table<PgStatSslRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgStatSsl(Name alias, Table<PgStatSslRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view());
    }

    public PgStatSsl(String alias) {
        this(DSL.name(alias), PG_STAT_SSL);
    }

    public PgStatSsl(Name alias) {
        this(alias, PG_STAT_SSL);
    }

    public PgStatSsl() {
        this(DSL.name("pg_stat_ssl"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public PgStatSsl as(String alias) {
        return new PgStatSsl(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public PgStatSsl as(Name alias) {
        return new PgStatSsl(alias, this);
    }

    @Override
    @NotNull
    public PgStatSsl as(Table<?> alias) {
        return new PgStatSsl(alias.getQualifiedName(), this);
    }

    @Override
    @NotNull
    public PgStatSsl rename(String name) {
        return new PgStatSsl(DSL.name(name), null);
    }

    @Override
    @NotNull
    public PgStatSsl rename(Name name) {
        return new PgStatSsl(name, null);
    }

    @Override
    @NotNull
    public PgStatSsl rename(Table<?> name) {
        return new PgStatSsl(name.getQualifiedName(), null);
    }
}
