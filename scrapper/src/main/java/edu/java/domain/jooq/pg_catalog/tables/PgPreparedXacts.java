/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgPreparedXactsRecord;

import java.time.OffsetDateTime;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgPreparedXacts extends TableImpl<PgPreparedXactsRecord> {

    private static final long serialVersionUID = 1L;

    public static final PgPreparedXacts PG_PREPARED_XACTS = new PgPreparedXacts();

    @Override
    @NotNull
    public Class<PgPreparedXactsRecord> getRecordType() {
        return PgPreparedXactsRecord.class;
    }

    public final TableField<PgPreparedXactsRecord, Long> TRANSACTION = createField(DSL.name("transaction"), SQLDataType.BIGINT, this, "");

    public final TableField<PgPreparedXactsRecord, String> GID = createField(DSL.name("gid"), SQLDataType.CLOB, this, "");

    public final TableField<PgPreparedXactsRecord, OffsetDateTime> PREPARED = createField(DSL.name("prepared"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    public final TableField<PgPreparedXactsRecord, String> OWNER = createField(DSL.name("owner"), SQLDataType.VARCHAR, this, "");

    public final TableField<PgPreparedXactsRecord, String> DATABASE = createField(DSL.name("database"), SQLDataType.VARCHAR, this, "");

    private PgPreparedXacts(Name alias, Table<PgPreparedXactsRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgPreparedXacts(Name alias, Table<PgPreparedXactsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view());
    }

    public PgPreparedXacts(String alias) {
        this(DSL.name(alias), PG_PREPARED_XACTS);
    }

    public PgPreparedXacts(Name alias) {
        this(alias, PG_PREPARED_XACTS);
    }

    public PgPreparedXacts() {
        this(DSL.name("pg_prepared_xacts"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public PgPreparedXacts as(String alias) {
        return new PgPreparedXacts(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public PgPreparedXacts as(Name alias) {
        return new PgPreparedXacts(alias, this);
    }

    @Override
    @NotNull
    public PgPreparedXacts as(Table<?> alias) {
        return new PgPreparedXacts(alias.getQualifiedName(), this);
    }

    @Override
    @NotNull
    public PgPreparedXacts rename(String name) {
        return new PgPreparedXacts(DSL.name(name), null);
    }

    @Override
    @NotNull
    public PgPreparedXacts rename(Name name) {
        return new PgPreparedXacts(name, null);
    }

    @Override
    @NotNull
    public PgPreparedXacts rename(Table<?> name) {
        return new PgPreparedXacts(name.getQualifiedName(), null);
    }
}
