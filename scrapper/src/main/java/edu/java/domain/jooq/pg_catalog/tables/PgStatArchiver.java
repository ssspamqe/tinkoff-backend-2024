/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgStatArchiverRecord;

import java.time.OffsetDateTime;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgStatArchiver extends TableImpl<PgStatArchiverRecord> {

    private static final long serialVersionUID = 1L;

    public static final PgStatArchiver PG_STAT_ARCHIVER = new PgStatArchiver();

    @Override
    @NotNull
    public Class<PgStatArchiverRecord> getRecordType() {
        return PgStatArchiverRecord.class;
    }

    public final TableField<PgStatArchiverRecord, Long> ARCHIVED_COUNT = createField(DSL.name("archived_count"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatArchiverRecord, String> LAST_ARCHIVED_WAL = createField(DSL.name("last_archived_wal"), SQLDataType.CLOB, this, "");

    public final TableField<PgStatArchiverRecord, OffsetDateTime> LAST_ARCHIVED_TIME = createField(DSL.name("last_archived_time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    public final TableField<PgStatArchiverRecord, Long> FAILED_COUNT = createField(DSL.name("failed_count"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatArchiverRecord, String> LAST_FAILED_WAL = createField(DSL.name("last_failed_wal"), SQLDataType.CLOB, this, "");

    public final TableField<PgStatArchiverRecord, OffsetDateTime> LAST_FAILED_TIME = createField(DSL.name("last_failed_time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    public final TableField<PgStatArchiverRecord, OffsetDateTime> STATS_RESET = createField(DSL.name("stats_reset"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private PgStatArchiver(Name alias, Table<PgStatArchiverRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgStatArchiver(Name alias, Table<PgStatArchiverRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view());
    }

    public PgStatArchiver(String alias) {
        this(DSL.name(alias), PG_STAT_ARCHIVER);
    }

    public PgStatArchiver(Name alias) {
        this(alias, PG_STAT_ARCHIVER);
    }

    public PgStatArchiver() {
        this(DSL.name("pg_stat_archiver"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public PgStatArchiver as(String alias) {
        return new PgStatArchiver(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public PgStatArchiver as(Name alias) {
        return new PgStatArchiver(alias, this);
    }

    @Override
    @NotNull
    public PgStatArchiver as(Table<?> alias) {
        return new PgStatArchiver(alias.getQualifiedName(), this);
    }

    @Override
    @NotNull
    public PgStatArchiver rename(String name) {
        return new PgStatArchiver(DSL.name(name), null);
    }

    @Override
    @NotNull
    public PgStatArchiver rename(Name name) {
        return new PgStatArchiver(name, null);
    }

    @Override
    @NotNull
    public PgStatArchiver rename(Table<?> name) {
        return new PgStatArchiver(name.getQualifiedName(), null);
    }
}
