/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.information_schema.tables.records;


import edu.java.domain.jooq.information_schema.tables.DomainConstraints;

import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.Nullable;
import org.jooq.impl.TableRecordImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class DomainConstraintsRecord extends TableRecordImpl<DomainConstraintsRecord> {

    private static final long serialVersionUID = 1L;

    public void setConstraintCatalog(@Nullable String value) {
        set(0, value);
    }

    @Nullable
    public String getConstraintCatalog() {
        return (String) get(0);
    }

    public void setConstraintSchema(@Nullable String value) {
        set(1, value);
    }

    @Nullable
    public String getConstraintSchema() {
        return (String) get(1);
    }

    public void setConstraintName(@Nullable String value) {
        set(2, value);
    }

    @Nullable
    public String getConstraintName() {
        return (String) get(2);
    }

    public void setDomainCatalog(@Nullable String value) {
        set(3, value);
    }

    @Nullable
    public String getDomainCatalog() {
        return (String) get(3);
    }

    public void setDomainSchema(@Nullable String value) {
        set(4, value);
    }

    @Nullable
    public String getDomainSchema() {
        return (String) get(4);
    }

    public void setDomainName(@Nullable String value) {
        set(5, value);
    }

    @Nullable
    public String getDomainName() {
        return (String) get(5);
    }

    public void setIsDeferrable(@Nullable String value) {
        set(6, value);
    }

    @Size(max = 3)
    @Nullable
    public String getIsDeferrable() {
        return (String) get(6);
    }

    public void setInitiallyDeferred(@Nullable String value) {
        set(7, value);
    }

    @Size(max = 3)
    @Nullable
    public String getInitiallyDeferred() {
        return (String) get(7);
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    public DomainConstraintsRecord() {
        super(DomainConstraints.DOMAIN_CONSTRAINTS);
    }

    @ConstructorProperties({ "constraintCatalog", "constraintSchema", "constraintName", "domainCatalog", "domainSchema", "domainName", "isDeferrable", "initiallyDeferred" })
    public DomainConstraintsRecord(@Nullable String constraintCatalog, @Nullable String constraintSchema, @Nullable String constraintName, @Nullable String domainCatalog, @Nullable String domainSchema, @Nullable String domainName, @Nullable String isDeferrable, @Nullable String initiallyDeferred) {
        super(DomainConstraints.DOMAIN_CONSTRAINTS);

        setConstraintCatalog(constraintCatalog);
        setConstraintSchema(constraintSchema);
        setConstraintName(constraintName);
        setDomainCatalog(domainCatalog);
        setDomainSchema(domainSchema);
        setDomainName(domainName);
        setIsDeferrable(isDeferrable);
        setInitiallyDeferred(initiallyDeferred);
        resetChangedOnNotNull();
    }

    public DomainConstraintsRecord(edu.java.domain.jooq.information_schema.tables.pojos.DomainConstraints value) {
        super(DomainConstraints.DOMAIN_CONSTRAINTS);

        if (value != null) {
            setConstraintCatalog(value.getConstraintCatalog());
            setConstraintSchema(value.getConstraintSchema());
            setConstraintName(value.getConstraintName());
            setDomainCatalog(value.getDomainCatalog());
            setDomainSchema(value.getDomainSchema());
            setDomainName(value.getDomainName());
            setIsDeferrable(value.getIsDeferrable());
            setInitiallyDeferred(value.getInitiallyDeferred());
            resetChangedOnNotNull();
        }
    }
}
