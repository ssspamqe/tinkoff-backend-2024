/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.information_schema.tables;


import edu.java.domain.jooq.information_schema.InformationSchema;
import edu.java.domain.jooq.information_schema.tables.records._PgUserMappingsRecord;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class _PgUserMappings extends TableImpl<_PgUserMappingsRecord> {

    private static final long serialVersionUID = 1L;

    public static final _PgUserMappings _PG_USER_MAPPINGS = new _PgUserMappings();

    @Override
    @NotNull
    public Class<_PgUserMappingsRecord> getRecordType() {
        return _PgUserMappingsRecord.class;
    }

    public final TableField<_PgUserMappingsRecord, Long> OID = createField(DSL.name("oid"), SQLDataType.BIGINT, this, "");

    public final TableField<_PgUserMappingsRecord, String[]> UMOPTIONS = createField(DSL.name("umoptions"), SQLDataType.CLOB.array(), this, "");

    public final TableField<_PgUserMappingsRecord, Long> UMUSER = createField(DSL.name("umuser"), SQLDataType.BIGINT, this, "");

    public final TableField<_PgUserMappingsRecord, String> AUTHORIZATION_IDENTIFIER = createField(DSL.name("authorization_identifier"), edu.java.domain.jooq.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    public final TableField<_PgUserMappingsRecord, String> FOREIGN_SERVER_CATALOG = createField(DSL.name("foreign_server_catalog"), edu.java.domain.jooq.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    public final TableField<_PgUserMappingsRecord, String> FOREIGN_SERVER_NAME = createField(DSL.name("foreign_server_name"), edu.java.domain.jooq.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    public final TableField<_PgUserMappingsRecord, String> SRVOWNER = createField(DSL.name("srvowner"), edu.java.domain.jooq.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "");

    private _PgUserMappings(Name alias, Table<_PgUserMappingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private _PgUserMappings(Name alias, Table<_PgUserMappingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view());
    }

    public _PgUserMappings(String alias) {
        this(DSL.name(alias), _PG_USER_MAPPINGS);
    }

    public _PgUserMappings(Name alias) {
        this(alias, _PG_USER_MAPPINGS);
    }

    public _PgUserMappings() {
        this(DSL.name("_pg_user_mappings"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    @NotNull
    public _PgUserMappings as(String alias) {
        return new _PgUserMappings(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public _PgUserMappings as(Name alias) {
        return new _PgUserMappings(alias, this);
    }

    @Override
    @NotNull
    public _PgUserMappings as(Table<?> alias) {
        return new _PgUserMappings(alias.getQualifiedName(), this);
    }

    @Override
    @NotNull
    public _PgUserMappings rename(String name) {
        return new _PgUserMappings(DSL.name(name), null);
    }

    @Override
    @NotNull
    public _PgUserMappings rename(Name name) {
        return new _PgUserMappings(name, null);
    }

    @Override
    @NotNull
    public _PgUserMappings rename(Table<?> name) {
        return new _PgUserMappings(name.getQualifiedName(), null);
    }
}
