/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgShowReplicationOriginStatusRecord;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgShowReplicationOriginStatus extends TableImpl<PgShowReplicationOriginStatusRecord> {

    private static final long serialVersionUID = 1L;

    public static final PgShowReplicationOriginStatus PG_SHOW_REPLICATION_ORIGIN_STATUS = new PgShowReplicationOriginStatus();

    @Override
    @NotNull
    public Class<PgShowReplicationOriginStatusRecord> getRecordType() {
        return PgShowReplicationOriginStatusRecord.class;
    }

    public final TableField<PgShowReplicationOriginStatusRecord, Long> LOCAL_ID = createField(DSL.name("local_id"), SQLDataType.BIGINT, this, "");

    public final TableField<PgShowReplicationOriginStatusRecord, String> EXTERNAL_ID = createField(DSL.name("external_id"), SQLDataType.CLOB, this, "");

    @Deprecated
    public final TableField<PgShowReplicationOriginStatusRecord, Object> REMOTE_LSN = createField(DSL.name("remote_lsn"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_lsn\""), this, "");

    @Deprecated
    public final TableField<PgShowReplicationOriginStatusRecord, Object> LOCAL_LSN = createField(DSL.name("local_lsn"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_lsn\""), this, "");

    private PgShowReplicationOriginStatus(Name alias, Table<PgShowReplicationOriginStatusRecord> aliased) {
        this(alias, aliased, new Field[] {
        });
    }

    private PgShowReplicationOriginStatus(Name alias, Table<PgShowReplicationOriginStatusRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    public PgShowReplicationOriginStatus(String alias) {
        this(DSL.name(alias), PG_SHOW_REPLICATION_ORIGIN_STATUS);
    }

    public PgShowReplicationOriginStatus(Name alias) {
        this(alias, PG_SHOW_REPLICATION_ORIGIN_STATUS);
    }

    public PgShowReplicationOriginStatus() {
        this(DSL.name("pg_show_replication_origin_status"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public PgShowReplicationOriginStatus as(String alias) {
        return new PgShowReplicationOriginStatus(DSL.name(alias), this, parameters);
    }

    @Override
    @NotNull
    public PgShowReplicationOriginStatus as(Name alias) {
        return new PgShowReplicationOriginStatus(alias, this, parameters);
    }

    @Override
    @NotNull
    public PgShowReplicationOriginStatus as(Table<?> alias) {
        return new PgShowReplicationOriginStatus(alias.getQualifiedName(), this, parameters);
    }

    @Override
    @NotNull
    public PgShowReplicationOriginStatus rename(String name) {
        return new PgShowReplicationOriginStatus(DSL.name(name), null, parameters);
    }

    @Override
    @NotNull
    public PgShowReplicationOriginStatus rename(Name name) {
        return new PgShowReplicationOriginStatus(name, null, parameters);
    }

    @Override
    @NotNull
    public PgShowReplicationOriginStatus rename(Table<?> name) {
        return new PgShowReplicationOriginStatus(name.getQualifiedName(), null, parameters);
    }

    public PgShowReplicationOriginStatus call() {
        PgShowReplicationOriginStatus result = new PgShowReplicationOriginStatus(DSL.name("pg_show_replication_origin_status"), null, new Field[] {});

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
