/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.public_.tables;


import edu.java.domain.jooq.public_.Public;
import edu.java.domain.jooq.public_.tables.records.GitHubRepositoriesRecord;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class GitHubRepositories extends TableImpl<GitHubRepositoriesRecord> {

    private static final long serialVersionUID = 1L;

    public static final GitHubRepositories GIT_HUB_REPOSITORIES = new GitHubRepositories();

    @Override
    @NotNull
    public Class<GitHubRepositoriesRecord> getRecordType() {
        return GitHubRepositoriesRecord.class;
    }

    public final TableField<GitHubRepositoriesRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<GitHubRepositoriesRecord, Long> LINK_ID = createField(DSL.name("link_id"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<GitHubRepositoriesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    public final TableField<GitHubRepositoriesRecord, String> OWNER = createField(DSL.name("owner"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    public final TableField<GitHubRepositoriesRecord, String> DESCRIPTION_MD5_HASH = createField(DSL.name("description_md5_hash"), SQLDataType.CLOB.nullable(false), this, "");

    public final TableField<GitHubRepositoriesRecord, Long[]> ACTIVITIES_IDS = createField(DSL.name("activities_ids"), SQLDataType.BIGINT.nullable(false).array(), this, "");

    private GitHubRepositories(Name alias, Table<GitHubRepositoriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private GitHubRepositories(Name alias, Table<GitHubRepositoriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public GitHubRepositories(String alias) {
        this(DSL.name(alias), GIT_HUB_REPOSITORIES);
    }

    public GitHubRepositories(Name alias) {
        this(alias, GIT_HUB_REPOSITORIES);
    }

    public GitHubRepositories() {
        this(DSL.name("git_hub_repositories"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @NotNull
    public GitHubRepositories as(String alias) {
        return new GitHubRepositories(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public GitHubRepositories as(Name alias) {
        return new GitHubRepositories(alias, this);
    }

    @Override
    @NotNull
    public GitHubRepositories as(Table<?> alias) {
        return new GitHubRepositories(alias.getQualifiedName(), this);
    }

    @Override
    @NotNull
    public GitHubRepositories rename(String name) {
        return new GitHubRepositories(DSL.name(name), null);
    }

    @Override
    @NotNull
    public GitHubRepositories rename(Name name) {
        return new GitHubRepositories(name, null);
    }

    @Override
    @NotNull
    public GitHubRepositories rename(Table<?> name) {
        return new GitHubRepositories(name.getQualifiedName(), null);
    }
}
