/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgGetCatalogForeignKeysRecord;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgGetCatalogForeignKeys extends TableImpl<PgGetCatalogForeignKeysRecord> {

    private static final long serialVersionUID = 1L;

    public static final PgGetCatalogForeignKeys PG_GET_CATALOG_FOREIGN_KEYS = new PgGetCatalogForeignKeys();

    @Override
    @NotNull
    public Class<PgGetCatalogForeignKeysRecord> getRecordType() {
        return PgGetCatalogForeignKeysRecord.class;
    }

    @Deprecated
    public final TableField<PgGetCatalogForeignKeysRecord, Object> FKTABLE = createField(DSL.name("fktable"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"regclass\""), this, "");

    public final TableField<PgGetCatalogForeignKeysRecord, String[]> FKCOLS = createField(DSL.name("fkcols"), SQLDataType.CLOB.array(), this, "");

    @Deprecated
    public final TableField<PgGetCatalogForeignKeysRecord, Object> PKTABLE = createField(DSL.name("pktable"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"regclass\""), this, "");

    public final TableField<PgGetCatalogForeignKeysRecord, String[]> PKCOLS = createField(DSL.name("pkcols"), SQLDataType.CLOB.array(), this, "");

    public final TableField<PgGetCatalogForeignKeysRecord, Boolean> IS_ARRAY = createField(DSL.name("is_array"), SQLDataType.BOOLEAN, this, "");

    public final TableField<PgGetCatalogForeignKeysRecord, Boolean> IS_OPT = createField(DSL.name("is_opt"), SQLDataType.BOOLEAN, this, "");

    private PgGetCatalogForeignKeys(Name alias, Table<PgGetCatalogForeignKeysRecord> aliased) {
        this(alias, aliased, new Field[] {
        });
    }

    private PgGetCatalogForeignKeys(Name alias, Table<PgGetCatalogForeignKeysRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    public PgGetCatalogForeignKeys(String alias) {
        this(DSL.name(alias), PG_GET_CATALOG_FOREIGN_KEYS);
    }

    public PgGetCatalogForeignKeys(Name alias) {
        this(alias, PG_GET_CATALOG_FOREIGN_KEYS);
    }

    public PgGetCatalogForeignKeys() {
        this(DSL.name("pg_get_catalog_foreign_keys"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public PgGetCatalogForeignKeys as(String alias) {
        return new PgGetCatalogForeignKeys(DSL.name(alias), this, parameters);
    }

    @Override
    @NotNull
    public PgGetCatalogForeignKeys as(Name alias) {
        return new PgGetCatalogForeignKeys(alias, this, parameters);
    }

    @Override
    @NotNull
    public PgGetCatalogForeignKeys as(Table<?> alias) {
        return new PgGetCatalogForeignKeys(alias.getQualifiedName(), this, parameters);
    }

    @Override
    @NotNull
    public PgGetCatalogForeignKeys rename(String name) {
        return new PgGetCatalogForeignKeys(DSL.name(name), null, parameters);
    }

    @Override
    @NotNull
    public PgGetCatalogForeignKeys rename(Name name) {
        return new PgGetCatalogForeignKeys(name, null, parameters);
    }

    @Override
    @NotNull
    public PgGetCatalogForeignKeys rename(Table<?> name) {
        return new PgGetCatalogForeignKeys(name.getQualifiedName(), null, parameters);
    }

    public PgGetCatalogForeignKeys call() {
        PgGetCatalogForeignKeys result = new PgGetCatalogForeignKeys(DSL.name("pg_get_catalog_foreign_keys"), null, new Field[] {});

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
