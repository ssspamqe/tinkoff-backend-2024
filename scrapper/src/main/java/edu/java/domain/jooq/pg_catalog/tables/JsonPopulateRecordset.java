/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.JsonPopulateRecordsetRecord;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JsonPopulateRecordset extends TableImpl<JsonPopulateRecordsetRecord> {

    private static final long serialVersionUID = 1L;

    public static final JsonPopulateRecordset JSON_POPULATE_RECORDSET = new JsonPopulateRecordset();

    @Override
    @NotNull
    public Class<JsonPopulateRecordsetRecord> getRecordType() {
        return JsonPopulateRecordsetRecord.class;
    }

    @Deprecated
    public final TableField<JsonPopulateRecordsetRecord, Object> JSON_POPULATE_RECORDSET_ = createField(DSL.name("json_populate_recordset"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"anyelement\""), this, "");

    private JsonPopulateRecordset(Name alias, Table<JsonPopulateRecordsetRecord> aliased) {
        this(alias, aliased, new Field[] {
            DSL.val(null, org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"anyelement\"")),
            DSL.val(null, SQLDataType.JSON),
            DSL.val(null, SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)))
        });
    }

    private JsonPopulateRecordset(Name alias, Table<JsonPopulateRecordsetRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    public JsonPopulateRecordset(String alias) {
        this(DSL.name(alias), JSON_POPULATE_RECORDSET);
    }

    public JsonPopulateRecordset(Name alias) {
        this(alias, JSON_POPULATE_RECORDSET);
    }

    public JsonPopulateRecordset() {
        this(DSL.name("json_populate_recordset"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public JsonPopulateRecordset as(String alias) {
        return new JsonPopulateRecordset(DSL.name(alias), this, parameters);
    }

    @Override
    @NotNull
    public JsonPopulateRecordset as(Name alias) {
        return new JsonPopulateRecordset(alias, this, parameters);
    }

    @Override
    @NotNull
    public JsonPopulateRecordset as(Table<?> alias) {
        return new JsonPopulateRecordset(alias.getQualifiedName(), this, parameters);
    }

    @Override
    @NotNull
    public JsonPopulateRecordset rename(String name) {
        return new JsonPopulateRecordset(DSL.name(name), null, parameters);
    }

    @Override
    @NotNull
    public JsonPopulateRecordset rename(Name name) {
        return new JsonPopulateRecordset(name, null, parameters);
    }

    @Override
    @NotNull
    public JsonPopulateRecordset rename(Table<?> name) {
        return new JsonPopulateRecordset(name.getQualifiedName(), null, parameters);
    }

    public JsonPopulateRecordset call(
          Object base
        , JSON fromJson
        , Boolean useJsonAsText
    ) {
        JsonPopulateRecordset result = new JsonPopulateRecordset(DSL.name("json_populate_recordset"), null, new Field[] {
            DSL.val(base, org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"anyelement\"")),
            DSL.val(fromJson, SQLDataType.JSON),
            DSL.val(useJsonAsText, SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)))
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    public JsonPopulateRecordset call(
          Field<Object> base
        , Field<JSON> fromJson
        , Field<Boolean> useJsonAsText
    ) {
        JsonPopulateRecordset result = new JsonPopulateRecordset(DSL.name("json_populate_recordset"), null, new Field[] {
            base,
            fromJson,
            useJsonAsText
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
