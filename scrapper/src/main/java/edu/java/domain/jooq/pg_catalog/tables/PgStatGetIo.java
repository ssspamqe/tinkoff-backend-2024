/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgStatGetIoRecord;

import java.time.OffsetDateTime;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgStatGetIo extends TableImpl<PgStatGetIoRecord> {

    private static final long serialVersionUID = 1L;

    public static final PgStatGetIo PG_STAT_GET_IO = new PgStatGetIo();

    @Override
    @NotNull
    public Class<PgStatGetIoRecord> getRecordType() {
        return PgStatGetIoRecord.class;
    }

    public final TableField<PgStatGetIoRecord, String> BACKEND_TYPE = createField(DSL.name("backend_type"), SQLDataType.CLOB, this, "");

    public final TableField<PgStatGetIoRecord, String> OBJECT = createField(DSL.name("object"), SQLDataType.CLOB, this, "");

    public final TableField<PgStatGetIoRecord, String> CONTEXT = createField(DSL.name("context"), SQLDataType.CLOB, this, "");

    public final TableField<PgStatGetIoRecord, Long> READS = createField(DSL.name("reads"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatGetIoRecord, Double> READ_TIME = createField(DSL.name("read_time"), SQLDataType.DOUBLE, this, "");

    public final TableField<PgStatGetIoRecord, Long> WRITES = createField(DSL.name("writes"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatGetIoRecord, Double> WRITE_TIME = createField(DSL.name("write_time"), SQLDataType.DOUBLE, this, "");

    public final TableField<PgStatGetIoRecord, Long> WRITEBACKS = createField(DSL.name("writebacks"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatGetIoRecord, Double> WRITEBACK_TIME = createField(DSL.name("writeback_time"), SQLDataType.DOUBLE, this, "");

    public final TableField<PgStatGetIoRecord, Long> EXTENDS = createField(DSL.name("extends"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatGetIoRecord, Double> EXTEND_TIME = createField(DSL.name("extend_time"), SQLDataType.DOUBLE, this, "");

    public final TableField<PgStatGetIoRecord, Long> OP_BYTES = createField(DSL.name("op_bytes"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatGetIoRecord, Long> HITS = createField(DSL.name("hits"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatGetIoRecord, Long> EVICTIONS = createField(DSL.name("evictions"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatGetIoRecord, Long> REUSES = createField(DSL.name("reuses"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatGetIoRecord, Long> FSYNCS = createField(DSL.name("fsyncs"), SQLDataType.BIGINT, this, "");

    public final TableField<PgStatGetIoRecord, Double> FSYNC_TIME = createField(DSL.name("fsync_time"), SQLDataType.DOUBLE, this, "");

    public final TableField<PgStatGetIoRecord, OffsetDateTime> STATS_RESET = createField(DSL.name("stats_reset"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private PgStatGetIo(Name alias, Table<PgStatGetIoRecord> aliased) {
        this(alias, aliased, new Field[] {
        });
    }

    private PgStatGetIo(Name alias, Table<PgStatGetIoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    public PgStatGetIo(String alias) {
        this(DSL.name(alias), PG_STAT_GET_IO);
    }

    public PgStatGetIo(Name alias) {
        this(alias, PG_STAT_GET_IO);
    }

    public PgStatGetIo() {
        this(DSL.name("pg_stat_get_io"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public PgStatGetIo as(String alias) {
        return new PgStatGetIo(DSL.name(alias), this, parameters);
    }

    @Override
    @NotNull
    public PgStatGetIo as(Name alias) {
        return new PgStatGetIo(alias, this, parameters);
    }

    @Override
    @NotNull
    public PgStatGetIo as(Table<?> alias) {
        return new PgStatGetIo(alias.getQualifiedName(), this, parameters);
    }

    @Override
    @NotNull
    public PgStatGetIo rename(String name) {
        return new PgStatGetIo(DSL.name(name), null, parameters);
    }

    @Override
    @NotNull
    public PgStatGetIo rename(Name name) {
        return new PgStatGetIo(name, null, parameters);
    }

    @Override
    @NotNull
    public PgStatGetIo rename(Table<?> name) {
        return new PgStatGetIo(name.getQualifiedName(), null, parameters);
    }

    public PgStatGetIo call() {
        PgStatGetIo result = new PgStatGetIo(DSL.name("pg_stat_get_io"), null, new Field[] {});

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
