/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.pg_catalog.tables;


import edu.java.domain.jooq.pg_catalog.PgCatalog;
import edu.java.domain.jooq.pg_catalog.tables.records.PgAggregateRecord;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgAggregate extends TableImpl<PgAggregateRecord> {

    private static final long serialVersionUID = 1L;

    public static final PgAggregate PG_AGGREGATE = new PgAggregate();

    @Override
    @NotNull
    public Class<PgAggregateRecord> getRecordType() {
        return PgAggregateRecord.class;
    }

    public final TableField<PgAggregateRecord, String> AGGFNOID = createField(DSL.name("aggfnoid"), SQLDataType.VARCHAR.nullable(false), this, "");

    public final TableField<PgAggregateRecord, String> AGGKIND = createField(DSL.name("aggkind"), SQLDataType.CHAR.nullable(false), this, "");

    public final TableField<PgAggregateRecord, Short> AGGNUMDIRECTARGS = createField(DSL.name("aggnumdirectargs"), SQLDataType.SMALLINT.nullable(false), this, "");

    public final TableField<PgAggregateRecord, String> AGGTRANSFN = createField(DSL.name("aggtransfn"), SQLDataType.VARCHAR.nullable(false), this, "");

    public final TableField<PgAggregateRecord, String> AGGFINALFN = createField(DSL.name("aggfinalfn"), SQLDataType.VARCHAR.nullable(false), this, "");

    public final TableField<PgAggregateRecord, String> AGGCOMBINEFN = createField(DSL.name("aggcombinefn"), SQLDataType.VARCHAR.nullable(false), this, "");

    public final TableField<PgAggregateRecord, String> AGGSERIALFN = createField(DSL.name("aggserialfn"), SQLDataType.VARCHAR.nullable(false), this, "");

    public final TableField<PgAggregateRecord, String> AGGDESERIALFN = createField(DSL.name("aggdeserialfn"), SQLDataType.VARCHAR.nullable(false), this, "");

    public final TableField<PgAggregateRecord, String> AGGMTRANSFN = createField(DSL.name("aggmtransfn"), SQLDataType.VARCHAR.nullable(false), this, "");

    public final TableField<PgAggregateRecord, String> AGGMINVTRANSFN = createField(DSL.name("aggminvtransfn"), SQLDataType.VARCHAR.nullable(false), this, "");

    public final TableField<PgAggregateRecord, String> AGGMFINALFN = createField(DSL.name("aggmfinalfn"), SQLDataType.VARCHAR.nullable(false), this, "");

    public final TableField<PgAggregateRecord, Boolean> AGGFINALEXTRA = createField(DSL.name("aggfinalextra"), SQLDataType.BOOLEAN.nullable(false), this, "");

    public final TableField<PgAggregateRecord, Boolean> AGGMFINALEXTRA = createField(DSL.name("aggmfinalextra"), SQLDataType.BOOLEAN.nullable(false), this, "");

    public final TableField<PgAggregateRecord, String> AGGFINALMODIFY = createField(DSL.name("aggfinalmodify"), SQLDataType.CHAR.nullable(false), this, "");

    public final TableField<PgAggregateRecord, String> AGGMFINALMODIFY = createField(DSL.name("aggmfinalmodify"), SQLDataType.CHAR.nullable(false), this, "");

    public final TableField<PgAggregateRecord, Long> AGGSORTOP = createField(DSL.name("aggsortop"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgAggregateRecord, Long> AGGTRANSTYPE = createField(DSL.name("aggtranstype"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgAggregateRecord, Integer> AGGTRANSSPACE = createField(DSL.name("aggtransspace"), SQLDataType.INTEGER.nullable(false), this, "");

    public final TableField<PgAggregateRecord, Long> AGGMTRANSTYPE = createField(DSL.name("aggmtranstype"), SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<PgAggregateRecord, Integer> AGGMTRANSSPACE = createField(DSL.name("aggmtransspace"), SQLDataType.INTEGER.nullable(false), this, "");

    public final TableField<PgAggregateRecord, String> AGGINITVAL = createField(DSL.name("agginitval"), SQLDataType.CLOB, this, "");

    public final TableField<PgAggregateRecord, String> AGGMINITVAL = createField(DSL.name("aggminitval"), SQLDataType.CLOB, this, "");

    private PgAggregate(Name alias, Table<PgAggregateRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgAggregate(Name alias, Table<PgAggregateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public PgAggregate(String alias) {
        this(DSL.name(alias), PG_AGGREGATE);
    }

    public PgAggregate(Name alias) {
        this(alias, PG_AGGREGATE);
    }

    public PgAggregate() {
        this(DSL.name("pg_aggregate"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    @NotNull
    public PgAggregate as(String alias) {
        return new PgAggregate(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public PgAggregate as(Name alias) {
        return new PgAggregate(alias, this);
    }

    @Override
    @NotNull
    public PgAggregate as(Table<?> alias) {
        return new PgAggregate(alias.getQualifiedName(), this);
    }

    @Override
    @NotNull
    public PgAggregate rename(String name) {
        return new PgAggregate(DSL.name(name), null);
    }

    @Override
    @NotNull
    public PgAggregate rename(Name name) {
        return new PgAggregate(name, null);
    }

    @Override
    @NotNull
    public PgAggregate rename(Table<?> name) {
        return new PgAggregate(name.getQualifiedName(), null);
    }
}
